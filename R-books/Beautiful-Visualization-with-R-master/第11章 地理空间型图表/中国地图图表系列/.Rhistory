geom_raster(data=tile_nanhai,aes(x=long,y=lat,fill=kde))+
geom_contour(data=tile_china,aes(x=long,y=lat,z=kde),color="white",breaks=breaks_lines)+
scale_fill_gradientn(colours=rev(brewer.pal(11,'Spectral')))+
#添加省份的图层
geom_polygon(data=df_China2, aes(x = long, y = lat,group=interaction(class,group)),
fill=NA,colour="grey60",size=0.25) +
geom_rect(aes(xmin=long_Start, xmax=long_Start+Width+0.3, ymin=lat_Start-0.3, ymax=lat_Start+Height),
fill=NA,colour="black",size=0.25)+
geom_line(data=df_NanHaiLine, aes(x=long, y=lat, group=ID), colour="black", size=1)+ #中国南海九段线
coord_cartesian()+
ylim(15,55)+
theme_void()+
theme(
legend.position=c(0.2,0.2),
legend.background=element_blank()
)
ggplot() +
#添加核密度估计的图层
geom_raster(data=tile_china,aes(x=long,y=lat,fill=kde))+
geom_raster(data=tile_nanhai,aes(x=long,y=lat,fill=kde))+
geom_contour(data=tile_china,aes(x=long,y=lat,z=kde),color="white",breaks=breaks_lines)+
scale_fill_gradientn(colours=rev(brewer.pal(11,'Spectral')))+
geom_path(data=df_China1, aes(x = long, y = lat,group=interaction(class,group)),
colour="black",size=0.25) +
#添加省份的图层
geom_path(data=df_China2, aes(x = long, y = lat,group=interaction(class,group)),
colour="grey60",size=0.25) +
geom_rect(aes(xmin=long_Start, xmax=long_Start+Width+0.3, ymin=lat_Start-0.3, ymax=lat_Start+Height),
fill=NA,colour="black",size=0.25)+
geom_line(data=df_NanHaiLine, aes(x=long, y=lat, group=ID), colour="black", size=1)+ #中国南海九段线
coord_cartesian()+
ylim(15,55)+
theme_void()+
theme(
legend.position=c(0.2,0.2),
legend.background=element_blank()
)
ggplot() +
#添加核密度估计的图层
geom_raster(data=tile_china,aes(x=long,y=lat,fill=kde))+
geom_raster(data=tile_nanhai,aes(x=long,y=lat,fill=kde))+
geom_contour(data=tile_china,aes(x=long,y=lat,z=kde),color="white",breaks=breaks_lines)+
scale_fill_gradientn(colours=rev(brewer.pal(11,'Spectral')))+
geom_path(data=df_China1, aes(x = long, y = lat),
colour="black",size=0.25) +
#添加省份的图层
geom_path(data=df_China2, aes(x = long, y = lat,group=interaction(class,group)),
colour="grey60",size=0.25) +
geom_rect(aes(xmin=long_Start, xmax=long_Start+Width+0.3, ymin=lat_Start-0.3, ymax=lat_Start+Height),
fill=NA,colour="black",size=0.25)+
geom_line(data=df_NanHaiLine, aes(x=long, y=lat, group=ID), colour="black", size=1)+ #中国南海九段线
coord_cartesian()+
ylim(15,55)+
theme_void()+
theme(
legend.position=c(0.2,0.2),
legend.background=element_blank()
)
ggplot() +
#添加核密度估计的图层
geom_raster(data=tile_china,aes(x=long,y=lat,fill=kde))+
geom_raster(data=tile_nanhai,aes(x=long,y=lat,fill=kde))+
geom_contour(data=tile_china,aes(x=long,y=lat,z=kde),color="white",breaks=breaks_lines)+
scale_fill_gradientn(colours=rev(brewer.pal(11,'Spectral')))+
geom_path(data=df_China1, aes(x = long, y = lat,group=group),colour="black",size=0.25) +
#添加省份的图层
geom_path(data=df_China2, aes(x = long, y = lat,group=interaction(class,group)),
colour="grey60",size=0.25) +
geom_rect(aes(xmin=long_Start, xmax=long_Start+Width+0.3, ymin=lat_Start-0.3, ymax=lat_Start+Height),
fill=NA,colour="black",size=0.25)+
geom_line(data=df_NanHaiLine, aes(x=long, y=lat, group=ID), colour="black", size=1)+ #中国南海九段线
coord_cartesian()+
ylim(15,55)+
theme_void()+
theme(
legend.position=c(0.2,0.2),
legend.background=element_blank()
)
ggplot() +
#添加核密度估计的图层
geom_raster(data=tile_china,aes(x=long,y=lat,fill=kde))+
geom_raster(data=tile_nanhai,aes(x=long,y=lat,fill=kde))+
geom_contour(data=tile_china,aes(x=long,y=lat,z=kde),color="white",breaks=breaks_lines)+
scale_fill_gradientn(colours=rev(brewer.pal(11,'Spectral')))+
#添加省份的图层
geom_path(data=df_China2, aes(x = long, y = lat,group=interaction(class,group)),
colour="grey60",size=0.25) +
geom_rect(aes(xmin=long_Start, xmax=long_Start+Width+0.3, ymin=lat_Start-0.3, ymax=lat_Start+Height),
fill=NA,colour="black",size=0.25)+
geom_line(data=df_NanHaiLine, aes(x=long, y=lat, group=ID), colour="black", size=1)+ #中国南海九段线
geom_path(data=df_China1, aes(x = long, y = lat,group=group),colour="black",size=0.25) +
coord_cartesian()+
ylim(15,55)+
theme_void()+
theme(
legend.position=c(0.2,0.2),
legend.background=element_blank()
)
#EasyCharts团队出品，
#如需使用与深入学习，请联系微信：EasyCharts
library(rgdal)   #提供readOGR()函数
library(ggplot2)
library(dplyr)
library(geosphere)
dataProjected <- readOGR("China_adm_shp/bou2_4m/bou2_4p.shp")
dataProjected@data$id <- rownames(dataProjected@data)
watershedPoints <- fortify(dataProjected)
df_China2 <-  full_join(watershedPoints, dataProjected@data, by = "id")
df_China2$class<-rep("Mainland",nrow(df_China2))
df_NanHaiLine <- read.csv("中国南海九段线.csv")
colnames(df_NanHaiLine)<-c("long","lat","ID")
Width<-9
Height<-9
long_Start<-124
lat_Start<-16
df_Nanhai<-df_China2[df_China2$long>106.55 & df_China2$long<123.58,]
df_Nanhai<-df_Nanhai[df_Nanhai$lat>4.61 & df_Nanhai$lat<25.45,]
min_long<-min(min(df_Nanhai$long, na.rm = TRUE),min(df_NanHaiLine$long))
min_lat<-min(min(df_Nanhai$lat, na.rm = TRUE),min(df_NanHaiLine$lat))
max_long<-max(min(df_Nanhai$long, na.rm = TRUE),max(df_NanHaiLine$long))
max_lat<-max(max(df_Nanhai$lat, na.rm = TRUE),max(df_NanHaiLine$lat))
df_Nanhai$long<-(df_Nanhai$long-min_long)/(max_long-min_long)*Width+long_Start
df_Nanhai$lat<-(df_Nanhai$lat-min_lat)/(max_lat-min_lat)*Height+lat_Start
df_Nanhai$class<-rep("NanHai",nrow(df_Nanhai))
df_China2<-rbind(df_China2,df_Nanhai)
df_NanHaiLine$long<-(df_NanHaiLine$long-min_long)/(max_long-min_long)*Width+long_Start
df_NanHaiLine$lat<-(df_NanHaiLine$lat-min_lat)/(max_lat-min_lat)*Height+lat_Start
#-----------------------------------------------------------------------------------
#flight_data<-read.table("国内航班数据.txt",header = TRUE)
#flight_data<-flight_data[1:300,]
#
# for (j in 1:length(flight_data$Start_City)) {
#   inter <- data.frame(gcIntermediate(c(flight_data$Start_long[j], flight_data$Start_lat[j]),
#                                      c(flight_data$End_long[j], flight_data$End_lat[j]),
#                                      n=50, addStartEnd=TRUE))
#   inter$group<-j
#   if (j==1){
#     flight_line<-inter
#   }else{
#     flight_line<-rbind(flight_line,inter)
#   }
#
# }
flight_line<- read.csv("flight_line.csv",header = TRUE,sep = ",",encoding="UTF-8")   #读取省会城市坐标
library(Cairo)         #图片高清导出
library(RColorBrewer)  #该保重存储着一些高质量的地图配色模板可以参考
library(showtext)
cairo_pdf(file="连接线地图.pdf",width=5.50,height=5.81)
showtext.begin()
#write.csv(flight_line, file = "flight_line.csv")
ggplot()+
geom_polygon(data=china_map, aes(x=long, y=lat, group=interaction(class,group)),fill="grey5",colour="grey30",size=0.1)+
#中国地图，包括中国主体部分和长方形方块内的南海诸岛数据
geom_rect(aes(xmin=long_Start, xmax=long_Start+Width+0.3, ymin=lat_Start-0.3, ymax=lat_Start+Height),fill=NA, colour="black",size=0.25)+
#绘制长方形方框
geom_line(data=NanHai_Line, aes(x=long, y=lat, group=ID), colour="black", size=1)+
geom_line(data=flight_line,aes(x=lon, y=lat,group=group), colour="white",alpha=0.02,size=0.25)+
theme_void()+
theme(plot.background = element_rect(fill="grey20"))
showtext.end()
dev.off()
# xlim <- c(70, 140)
# ylim <- c(0, 55)
# map("world", col="#f2f2f2", fill=TRUE, bg="white", lwd=0.05, xlim=xlim, ylim=ylim)
#
# for (j in 1:length(flight_data$Start_City)) {
#   inter <- gcIntermediate(c(flight_data$Start_long[j], flight_data$Start_lat[j]),
#                                      c(flight_data$End_long[j], flight_data$End_lat[j]),
#                                      n=100, addStartEnd=TRUE)
#   lines(inter, col="black", lwd=0.8)
#
# }
#write.csv(flight_line, file = "flight_line.csv")
ggplot()+
geom_polygon(data=china_map, aes(x=long, y=lat, group=interaction(class,group)),fill="grey5",colour="grey30",size=0.1)+
#中国地图，包括中国主体部分和长方形方块内的南海诸岛数据
geom_rect(aes(xmin=long_Start, xmax=long_Start+Width+0.3, ymin=lat_Start-0.3, ymax=lat_Start+Height),fill=NA, colour="black",size=0.25)+
#绘制长方形方框
geom_line(data=NanHai_Line, aes(x=long, y=lat, group=ID), colour="black", size=1)+
geom_line(data=flight_line,aes(x=lon, y=lat,group=group), colour="white",alpha=0.02,size=0.25)+
theme_void()+
theme(plot.background = element_rect(fill="grey20"))
#showtext.end()
#dev.off()
ggplot()+
geom_polygon(data=df_China2, aes(x=long, y=lat, group=interaction(class,group)),fill="grey5",colour="grey30",size=0.1)+
#中国地图，包括中国主体部分和长方形方块内的南海诸岛数据
geom_rect(aes(xmin=long_Start, xmax=long_Start+Width+0.3, ymin=lat_Start-0.3, ymax=lat_Start+Height),fill=NA, colour="black",size=0.25)+
#绘制长方形方框
geom_line(data=df_NanHaiLine, aes(x=long, y=lat, group=ID), colour="black", size=1)+
geom_line(data=flight_line,aes(x=lon, y=lat,group=group), colour="white",alpha=0.02,size=0.25)+
theme_void()+
theme(plot.background = element_rect(fill="grey20"))
#showtext.end()
#dev.off()
library(graphics)
library(tcltk)
library(pracma)
# Load the data generated by 01GenerateData.R
plot.data <- read.csv("GeneratedData/WorldPopulation.csv", header=TRUE, stringsAsFactors=FALSE)
# Add padding above/below where there was data
# On top
top.padding <- 1:1
for (i in top.padding) {
plot.data <- cbind(0, plot.data)
}
# On bottom
bottom.padding <- 1:1
for (i in bottom.padding) {
plot.data <- cbind(plot.data, 0)
}
# On left
zero.row <- vector(mode="integer", length=dim(plot.data)[1])
left.padding <- 1:10
for (i in left.padding) {
plot.data <- rbind(zero.row, plot.data)
}
# On right
right.padding <- 1:10
for (i in left.padding) {
plot.data <- rbind(plot.data, zero.row)
}
max <- max(plot.data) # Max value in the data, used for scaling
plottingHeight <- 1000 # Arbitrary number that provides the graph's height
scaleFactor <- 300 # Discovered through trial and error to keep the graph in the boundaries
gap <- plottingHeight / length(plot.data) # Space between lines
plot.width = 25
plot.height = 15
#svg(filename = "./CanadaSGBigPeaks2.svg", pointsize=12, width=plot.width, height=plot.height)
# Create a blank plot
yVals <- as.vector(plot.data[[1]] / max * scaleFactor)
plot(0, 0, xlim=c(0, length(yVals)), ylim=c(0,1100), type="n", las=1, xlab=NA, ylab=NA, bty="n", axes=FALSE)
plotting.threshold <- 0.1
plot.length = length(plot.data)
plot.data2<-plot.data
plot.data3<-data.frame(x=0,y=0,height=0,group=0)
groupid<-1
# Plot each line
for (i in 1:plot.length) {
# Grabs a row of data
yVals <- as.vector(plot.data[[i]] / max * scaleFactor)
xVals <- c(0:(length(yVals) - 1))
yVals.smooth =  savgol(yVals, 3, forder=4)
plot.data2[[i]]<-yVals.smooth
#polygon(xVals, yVals.smooth + plottingHeight, border = NA, col = "#ffffff")
#lines(xVals, yVals.smooth + plottingHeight, col="#8C8C8C", lwd=0.5)
#Plot the peaks with a darker line.
j <- 2 # Skip padding
while (j <= (length(yVals.smooth) - 2)) {
if ((yVals.smooth[j]) > plotting.threshold | (yVals.smooth[j+1]) > plotting.threshold) {
# segments(xVals[j], yVals.smooth[j] + plottingHeight, xVals[j+1], yVals.smooth[j+1] + plottingHeight, col="#000000", lwd=1.5)
plot.data3<-rbind(plot.data3,c(xVals[j],i,yVals.smooth[j],groupid))
} else {
groupid<-groupid+1
} # Do nothing
j <- j + 1
}
plottingHeight <- plottingHeight - gap
}
#dev.off()
library(reshape2)
colnames(plot.data2)<-seq(1,ncol(plot.data2),1)
plot.data2$x<-rownames(plot.data2)
mydata<-melt(plot.data2,id="x")
mydata$variable<-as.numeric(mydata$variable)
mydata$x<-as.numeric(mydata$x)
library(ggplot2)
library(RColorBrewer)
colormap <- colorRampPalette(rev(brewer.pal(11,'Spectral')))(32)
scale<-0.2
p<-ggplot() +
geom_line(data=mydata,aes(x=x,y=variable-value*scale,group=variable),colour="grey90",size=0.1)+
geom_linerange(data=plot.data3,aes(x=x,ymin=y,ymax=y-height*scale,group=group,color=height),size=0.5)+#,alpha=0
#geom_ribbon(data=plot.data3,aes(x=x,ymin=y,ymax=y-height*scale,group=group),fill="white")+
geom_line(data=plot.data3,aes(x=x,y=y-height*scale,group=group),colour="#000000",size=0.1)+
#geom_linerange(data=mydata,aes(x=y,ymin=variable,ymax=variable-value*scale,color=value),alpha=0.6)+
scale_color_gradientn(colours=colormap)+
scale_y_reverse()+
theme(
#panel.grid.major = element_line(colour = "grey90",size=.25,linetype ="solid" ),
#panel.grid.minor = element_line(colour = "grey90",size=.25,linetype ="solid" ),
plot.background=element_rect(fill="grey100",colour=NA),
panel.background=element_rect(fill="grey100",colour=NA),
text=element_text(size=15),
line=element_blank(),
axis.text=element_blank(),
axis.title=element_blank(),
plot.title=element_text(size=15,family="myfont"),
plot.caption=element_text(size=10,family="myfont",hjust=0),
legend.position="right",#c(0.85,0.2),
#legend.justification="left",
#legend.text.align=1,
legend.background=element_blank()
)
p
library(graphics)
library(tcltk)
library(pracma)
# Load the data generated by 01GenerateData.R
plot.data <- read.csv("WorldPopulation.csv", header=TRUE, stringsAsFactors=FALSE)
# Add padding above/below where there was data
# On top
top.padding <- 1:1
for (i in top.padding) {
plot.data <- cbind(0, plot.data)
}
# On bottom
bottom.padding <- 1:1
for (i in bottom.padding) {
plot.data <- cbind(plot.data, 0)
}
# On left
zero.row <- vector(mode="integer", length=dim(plot.data)[1])
left.padding <- 1:10
for (i in left.padding) {
plot.data <- rbind(zero.row, plot.data)
}
# On right
right.padding <- 1:10
for (i in left.padding) {
plot.data <- rbind(plot.data, zero.row)
}
max <- max(plot.data) # Max value in the data, used for scaling
plottingHeight <- 1000 # Arbitrary number that provides the graph's height
scaleFactor <- 300 # Discovered through trial and error to keep the graph in the boundaries
gap <- plottingHeight / length(plot.data) # Space between lines
plot.width = 25
plot.height = 15
#svg(filename = "./CanadaSGBigPeaks2.svg", pointsize=12, width=plot.width, height=plot.height)
# Create a blank plot
yVals <- as.vector(plot.data[[1]] / max * scaleFactor)
plot(0, 0, xlim=c(0, length(yVals)), ylim=c(0,1100), type="n", las=1, xlab=NA, ylab=NA, bty="n", axes=FALSE)
plotting.threshold <- 0.1
plot.length = length(plot.data)
plot.data2<-plot.data
plot.data3<-data.frame(x=0,y=0,height=0,group=0)
groupid<-1
# Plot each line
for (i in 1:plot.length) {
# Grabs a row of data
yVals <- as.vector(plot.data[[i]] / max * scaleFactor)
xVals <- c(0:(length(yVals) - 1))
yVals.smooth =  savgol(yVals, 3, forder=4)
plot.data2[[i]]<-yVals.smooth
#polygon(xVals, yVals.smooth + plottingHeight, border = NA, col = "#ffffff")
#lines(xVals, yVals.smooth + plottingHeight, col="#8C8C8C", lwd=0.5)
#Plot the peaks with a darker line.
j <- 2 # Skip padding
while (j <= (length(yVals.smooth) - 2)) {
if ((yVals.smooth[j]) > plotting.threshold | (yVals.smooth[j+1]) > plotting.threshold) {
# segments(xVals[j], yVals.smooth[j] + plottingHeight, xVals[j+1], yVals.smooth[j+1] + plottingHeight, col="#000000", lwd=1.5)
plot.data3<-rbind(plot.data3,c(xVals[j],i,yVals.smooth[j],groupid))
} else {
groupid<-groupid+1
} # Do nothing
j <- j + 1
}
plottingHeight <- plottingHeight - gap
}
#dev.off()
library(reshape2)
colnames(plot.data2)<-seq(1,ncol(plot.data2),1)
plot.data2$x<-rownames(plot.data2)
mydata<-melt(plot.data2,id="x")
mydata$variable<-as.numeric(mydata$variable)
mydata$x<-as.numeric(mydata$x)
library(ggplot2)
library(RColorBrewer)
colormap <- colorRampPalette(rev(brewer.pal(11,'Spectral')))(32)
scale<-0.2
p<-ggplot() +
geom_line(data=mydata,aes(x=x,y=variable-value*scale,group=variable),colour="grey90",size=0.1)+
geom_linerange(data=plot.data3,aes(x=x,ymin=y,ymax=y-height*scale,group=group,color=height),size=0.5)+#,alpha=0
#geom_ribbon(data=plot.data3,aes(x=x,ymin=y,ymax=y-height*scale,group=group),fill="white")+
geom_line(data=plot.data3,aes(x=x,y=y-height*scale,group=group),colour="#000000",size=0.1)+
#geom_linerange(data=mydata,aes(x=y,ymin=variable,ymax=variable-value*scale,color=value),alpha=0.6)+
scale_color_gradientn(colours=colormap)+
scale_y_reverse()+
theme(
#panel.grid.major = element_line(colour = "grey90",size=.25,linetype ="solid" ),
#panel.grid.minor = element_line(colour = "grey90",size=.25,linetype ="solid" ),
plot.background=element_rect(fill="grey100",colour=NA),
panel.background=element_rect(fill="grey100",colour=NA),
text=element_text(size=15),
line=element_blank(),
axis.text=element_blank(),
axis.title=element_blank(),
plot.title=element_text(size=15,family="myfont"),
plot.caption=element_text(size=10,family="myfont",hjust=0),
legend.position="right",#c(0.85,0.2),
#legend.justification="left",
#legend.text.align=1,
legend.background=element_blank()
)
p
#EasyCharts团队出品，
#如需使用与深入学习，请联系微信：EasyCharts
library(graphics)
library(tcltk)
library(pracma)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
plot.data<-read.table("China_Gridded_Population/ChinaGrid90.txt",header = FALSE)
colnames(plot.data)<-seq(70,70+(ncol(plot.data)-1)*0.0416666666667,0.0416666666667)
rownames(plot.data)<-seq(16+(nrow(plot.data)-1)*0.0416666666667,16,-0.0416666666667)
plot.data[[1633]]<-0
N<-15
max <-351135.5
plotting.threshold1 <- 0.005
plotting.threshold2 <- 0.0001
plot.length <- nrow(plot.data)
plot.data3<-data.frame(x=0,y=0,height=0,group=0)
plot.data4<-data.frame(x=0,y=0,height=0,group=0)
groupid1<-1
groupid2<-1
record_index<-1
# Plot each line
for (i in seq(1,plot.length,N)) {
# Grabs a row of data
yVals <- as.vector(as.numeric(plot.data[i,])) #* scaleFactor
xVals <- as.numeric(colnames(plot.data))#c(0:(length(yVals) - 1))
yVals.smooth =  savgol(yVals, 3, forder=4)
if (i==1){
plot.data2<-data.frame(t(yVals.smooth))
colnames(plot.data2)<-colnames(plot.data)
rownames(plot.data2)[i]<- rownames(plot.data)[i]
} else{
record_index<-record_index+1
plot.data2<-rbind(plot.data2,yVals.smooth)
rownames(plot.data2)[record_index]<- rownames(plot.data)[i]
}
j <- 2 # Skip padding
while (j <= (length(yVals.smooth) - 2)) {
if ((yVals.smooth[j])/ max> plotting.threshold1 | (yVals.smooth[j+1])/max > plotting.threshold1) {
# segments(xVals[j], yVals.smooth[j] + plottingHeight, xVals[j+1], yVals.smooth[j+1] + plottingHeight, col="#000000", lwd=1.5)
plot.data3<-rbind(plot.data3,c(xVals[j],rownames(plot.data)[i],yVals.smooth[j],groupid1))
} else {
groupid1<-groupid1+1
} # Do nothing
if ((yVals.smooth[j])> plotting.threshold2) {
# segments(xVals[j], yVals.smooth[j] + plottingHeight, xVals[j+1], yVals.smooth[j+1] + plottingHeight, col="#000000", lwd=1.5)
plot.data4<-rbind(plot.data4,c(xVals[j],rownames(plot.data)[i],yVals.smooth[j],groupid2))
} else{
groupid2<-groupid2+1
}
j <- j + 1
}
# plottingHeight <- plottingHeight - gap
}
plot.data3$x<-as.numeric(plot.data3$x)
plot.data3$y<-as.numeric(plot.data3$y)
plot.data3$height<-as.numeric(plot.data3$height)
plot.data4$x<-as.numeric(plot.data4$x)
plot.data4$y<-as.numeric(plot.data4$y)
plot.data4$height<-as.numeric(plot.data4$height)
colormap <- colorRampPalette(rev(brewer.pal(11,'Spectral')))(32)
library(maptools)
library(plyr)
dataProjected <- readOGR("China_adm_shp/bou1_4m/bou1_4p.shp")
dataProjected@data$id <- rownames(dataProjected@data)
watershedPoints <- fortify(dataProjected)
df_China1 <- merge(watershedPoints, dataProjected@data, by = "id")
taiwan_data<-df_China1[df_China1$AREA==3.171,]
scale<-20
Color="#00AAFF"
p<-ggplot() +
#geom_path(data=china_map_data0,  aes(x = long, y = lat,group=group),colour="black",size=0.25)+
geom_polygon(data=df_China1,  aes(x = long, y = lat,group=group),fill="grey95",size=0.25)+
geom_line(data=plot.data4,aes(x=x,y=y+height/ max*scale,group=group),colour=Color,size=0.1)+
#geom_line(data=mydata,aes(x=variable,y=y+value/ max*scale,group=y),colour="grey90",size=0.1)+
geom_path(data=taiwan_data,  aes(x = long, y = lat,group=group),colour=Color,size=0.25)#+
#geom_ribbon(data=plot.data3,aes(x=x,ymin=y,ymax=y-height*scale,group=group),fill="white")+
Rowname<-unique(plot.data3$group)
for (i in 2:length(Rowname)){
Inputdata<-plot.data3[plot.data3$group==Rowname[i],]
p<-p+ geom_ribbon(data=Inputdata,aes(x=x,ymin=y,ymax=y+height/ max*scale,group=group),fill="white")+
#geom_linerange(data=Inputdata,aes(x=x,ymin=y,ymax=y+height/ max*scale,group=group,color=height),size=0.15)+#,alpha=0
geom_line(data=Inputdata,aes(x=x,y=y+height/ max*scale,group=group),colour=Color,size=0.1)
}
# #geom_linerange(data=mydata,aes(x=y,ymin=variable,ymax=variable-value*scale,color=value),alpha=0.6)+
p<-p+scale_color_gradientn(colours=colormap,name="Density")+
# scale_y_reverse()+
xlim(70,70+(ncol(plot.data)-1)*0.0416666666667)+
ylim(16,16+(nrow(plot.data)-1)*0.0416666666667)+
theme(
#panel.grid.major = element_line(colour = "grey90",size=.25,linetype ="solid" ),
#panel.grid.minor = element_line(colour = "grey90",size=.25,linetype ="solid" ),
plot.background=element_rect(fill="grey100",colour=NA),
panel.background=element_rect(fill="grey100",colour=NA),
text=element_text(size=15),
line=element_blank(),
axis.text=element_blank(),
axis.title=element_blank(),
plot.title=element_text(size=15),
plot.caption=element_text(size=10,hjust=0),
legend.position=c(0.9,0.25),
legend.text=element_text(size=10),
legend.title=element_text(size=12),
#legend.justification="left",
#legend.text.align=1,
legend.background=element_blank()
)
p
t(yVals.smooth)
plot.data
colnames(plot.data)
columnnames(plot.data2)
columnames(plot.data2)
View(plot.data2)
columnames(plot.data2)a=data.frame(t(yVals.smooth))
a=data.frame(t(yVals.smooth))
