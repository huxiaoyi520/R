#-------------------------------一维统计直方图--------------------------
StatTileHist <- ggproto("StatTileHist", Stat,
required_aes = "x",
default_aes = aes(fill = stat(fill)),
setup_params = function(data, params) {
if (!is.null(params$bandwidth))
return(params)
xs <- split(data$x, data$group)
bws <- vapply(xs, bw.nrd0, numeric(1))
bw <- mean(bws)
message("Picking bandwidth of ", signif(bw, 3))
params$bandwidth <- bw
params
},
compute_group = function(data, scales, bandwidth = 1) {
step<-bandwidth
breaks<- seq(min(data$x)-step,max(data$x)+step,step)
hg <- hist(data$x, breaks = breaks , plot = FALSE) # Make histogram data but do not plot
bins <- length(hg$counts) # How many bin categories are needed?
yvals <- numeric(0)                  # A blank variable to fill in
xvals <- numeric(0)
for(i in 1:bins) {                  # Start a loop
yvals <- c(yvals, hg$counts[i]:0)  # Work out the y-values
xvals <- c(xvals, rep(hg$mids[i], hg$counts[i]+1))  # Work out x-values
}    # End the loop
Displat_Data <- data.frame(xvals, yvals)  # Make data frame of x, y variables
Displat_Data <- Displat_Data[yvals > 0, ]          # Knock out any zero y-values
data.frame(x = Displat_Data$xvals,
y = Displat_Data$yvals,
fill=Displat_Data$yvals)
}
)
#' @rdname ggplot2-ggproto
#' @format NULL
#' @usage NULL
#' @export
#' @include geom-rect.r
GeomCircle <- ggproto("GeomCircle", Geom,
extra_params = c("na.rm"),
setup_data = function(data, params) {
data$width <- data$width %||% params$width %||% resolution(data$x, FALSE)
data$height <- data$height %||% params$height %||% resolution(data$y, FALSE)
transform(data,#radius=min(width / 2,height / 2),
xmin = x - width / 2,  xmax = x + width / 2,  width = NULL,
ymin = y - height / 2, ymax = y + height / 2, height = NULL
)
},
default_aes = aes(shape = 21,fill = NA, colour = "black", size = 1, linetype = 1,
alpha = NA, width = NA, height = NA),
required_aes = c("x", "y"),
draw_key = draw_key_point,
draw_panel = function(data, panel_params, coord) {
#str(data)
coords <- coord$transform(data, panel_params)
coords<-transform(coords,radius=min(xmax-xmin,ymax-ymin)/2*size)
#str(coords)
#
grid::circleGrob(
coords$x, coords$y,
r=coords$radius,
#pch = coords$shape,
gp = grid::gpar(fill = coords$fill)
)
# grid::pointsGrob(
#   coords$x, coords$y,
#   #r=coords$radius,
#   pch = coords$shape,
#   size=unit(3, "char"),,
#   gp = grid::gpar(fill = coords$fill)
# )
}
)
stat_tile_hist <- function(mapping = NULL, data = NULL, geom = geom,
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, bandwidth = NULL,
...) {
layer(
stat = StatTileHist, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(bandwidth = bandwidth, na.rm = na.rm, ...)
)
}
#-------------------------------------------------一维图表：统计直方图-----------------------------------------------------
geom_tile_hist <- function(mapping = NULL, data = NULL, stat = "stat",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
geom =  "geom", mapping = mapping, data = data, stat = StatTileHist,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
colors0 <- wes_palette(n=3, name="Darjeeling1")
colormap <- colorRampPalette(rev(brewer.pal(11,'Spectral')))(32)
ggplot(df, aes(SOD)) +
stat_tile_hist(bandwidth = 0.05,colour="black",fill=colors0[1],shape=21, size=3,stroke=0.25,geom="point")+
#stat_tile_hist(bandwidth = 0.25,colour="black",geom = "tile")+
#geom_tile_hist(bandwidth = 0.25,colour="black")+
scale_fill_gradientn(colours=colormap)+
scale_y_continuous(breaks=seq(0,29,5))+
ylab("Count")+
theme_light()+
theme(
text=element_text(size=14,color="black"),
plot.title=element_text(size=14,family="myfont",face="bold.italic",hjust=.5,color="black"),
legend.background = element_blank(),
legend.position=c(0.9,0.75)
)
ggplot(df, aes(SOD,tau)) +
geom_point(size=3,shape=21,colour="black",fill=colors0[1],stroke=0.25) +
#scale_y_continuous(breaks=seq(0,29,5))+
#ylab("Count")+
theme_light()+
theme(
text=element_text(size=14,color="black"),
plot.title=element_text(size=14,family="myfont",face="bold.italic",hjust=.5,color="black"),
legend.background = element_blank(),
legend.position=c(0.9,0.75)
)
ggplot(df, aes(SOD,tau,fill=Class)) +
geom_point(size=3,shape=21,colour="black",stroke=0.25) +
#scale_y_continuous(breaks=seq(0,29,5))+
scale_fill_manual(values=colors0)+
#ylab("Count")+
theme_light()+
theme(
text=element_text(size=14,color="black"),
plot.title=element_text(size=14,family="myfont",face="bold.italic",hjust=.5,color="black"),
legend.background = element_blank(),
legend.position=c(0.85,0.15)
)
ggplot(df, aes(SOD,tau,fill=Class,size=age)) +
geom_point(shape=21,colour="black",stroke=0.25) +
#scale_y_continuous(breaks=seq(0,29,5))+
scale_fill_manual(values=colors0)+
#ylab("Count")+
theme_light()+
theme(
text=element_text(size=14,color="black"),
plot.title=element_text(size=14,family="myfont",face="bold.italic",hjust=.5,color="black"),
legend.background = element_blank(),
legend.position="right"
)
#-------------------------------------------------------------三维散点图----------------------------------------------------
colors0 <- wes_palette(n=3, name="Darjeeling1")
colors <- colors0[as.numeric(Alz$Class)]
s3d<-scatterplot3d(df[,1:3], pch = 21,color = "black", # overplotting, so add transparency
bg= colors,angle=55,cex.symbols = 1.2,scale.y=0.7,
x.ticklabs=levels(Alz$Class),
xlab = "Class",
ylab = "SOD",
zlab = "tau")
Alz<-read.csv("Facet_Data.csv", header = T)
df<-Alz[,c("SOD","age","tau","Class")]
s3d<-scatterplot3d(df[,1:3], pch = 21,color = "black", # overplotting, so add transparency
bg= colors0[1],angle=55,cex.symbols = 1,scale.y=0.7,
#x.ticklabs=levels(Alz$Class),
xlab = "SOD",
ylab = "age",
zlab = "tau")
#EasyCharts团队出品，如有商用必究，
#如需使用与深入学习，请联系微信：EasyCharts
library(ggplot2)
library(RColorBrewer)
library(reshape2)
library(wesanderson)
Alz <-read.csv("Facet_Data.csv", header = T)
#-----------------------------------图8-2-1 列分面的散点图(a) 列分面的散点图--------------------------------------------------
ggplot(Alz, aes(x = tau, y = SOD, fill = Class)) +
geom_point(size=3,shape=21,colour="black") +
# stat_smooth(method = "loess")+
facet_wrap( ~ Class) +
theme(
strip.text = element_text(size=13,face="plain",color="black"),
text=element_text(size=12,face="plain",color="black"),
axis.title=element_text(size=14,face="plain",color="black"),
axis.text = element_text(size=11,face="plain",color="black"),
legend.position="none"
)
ggplot(Alz, aes(x = tau, y = SOD,colour=Class, fill = Class)) +
geom_point(size=2,shape=21,fill="black",colour="black",alpha=0.5) +
stat_smooth(method = "loess")+
facet_grid(. ~ Class) +
theme(
strip.text = element_text(size=13,face="plain",color="black"),
text=element_text(size=12,face="plain",color="black"),
axis.title=element_text(size=14,face="plain",color="black"),
axis.text = element_text(size=11,face="plain",color="black"),
legend.position="none"
)
#---------------------------------------图8-2-2 列分面的气泡图(a) 列分面的气泡图-----------------------------------------------------------------------------------
ggplot(Alz, aes(x = tau, y = SOD, fill= Class, size = age)) +
geom_point(shape=21,colour="black",alpha=0.7) +
facet_wrap( ~ Class)+
guides(fill = FALSE)+
theme(
strip.text = element_text(size=13,face="plain",color="black"),
text=element_text(size=12,face="plain",color="black"),
axis.title=element_text(size=14,face="plain",color="black"),
axis.text = element_text(size=11,face="plain",color="black"),
legend.position=c(0.935,0.13),
legend.background = element_rect(fill=alpha("white",0))
)
#----------------------------------------图8-2-2 列分面的气泡图 (b) 列分面的带颜色映射的气泡图----------------------------------------------------------------------------
ggplot(Alz, aes(x = tau, y = SOD, fill=age, size = age)) +
geom_point(shape=21,colour="black",alpha=0.95) +
scale_fill_gradient2(low="#00A08A",mid="white",high="#FF0000",midpoint = mean(Alz$age))+
facet_wrap( ~ Class)+
#guides(fill = FALSE)+
theme(
strip.text = element_text(size=13,face="plain",color="black"),
text=element_text(size=12,face="plain",color="black"),
axis.title=element_text(size=14,face="plain",color="black"),
axis.text = element_text(size=11,face="plain",color="black"),
#legend.position=c(0.935,0.13),
legend.background = element_rect(fill=alpha("white",0))
)
#-----------------------------------------图8-2-3 矩阵分面气泡图--------------------------------------------------------------------------
Alz$male<-as.character(Alz$male)
Alz$male[Alz$male=="0"] <- "Female"
Alz$male[Alz$male=="1"] <- "Male"
colnames(Alz)[colnames(Alz)=="male"]<-"Gender"
ggplot(Alz, aes(x = tau, y = SOD, fill= Class, size = age)) +
geom_point(shape=21,colour="black",alpha=0.7) +
facet_grid(Gender ~ Class)+
guides(fill = FALSE)+
theme(
strip.text = element_text(size=13,face="plain",color="black"),
text=element_text(size=12,face="plain",color="black"),
axis.title=element_text(size=14,face="plain",color="black"),
axis.text = element_text(size=11,face="plain",color="black"),
legend.position=c(0.935,0.11),
legend.background = element_rect(fill=alpha("white",0))
)
#EasyCharts团队出品，如有商用必究，
#如需使用与深入学习，请联系微信：EasyCharts
library(ggplot2)
library(GGally)
library(RColorBrewer)
#library(devtools)
#install_github("ggobi/ggally")
#-------------------------------图7-3-1 矩阵散点图(a)单数据系列 ----------------------------------------------
lowerFn <- function(data, mapping, method = "loess", ...) {
p <- ggplot(data = data, mapping = mapping) +
geom_point(size=1)+#colour = "blue") +
geom_smooth(method = method, color = "red", ...)+
theme(panel.background = element_rect(fill = "white", colour = "grey20"))
p
}
diagFn <- function(data, mapping, method = "loess", ...) {
p <- ggplot(data = data, mapping = mapping) +
geom_histogram(colour = "black",size=0.1)+#)
#geom_smooth(method = method, color = "red", ...)+
theme(panel.background = element_rect(fill = "white", colour = "grey20"))
p
}
ggpairs(df,
lower = list(continuous = wrap(lowerFn, method = "lm")),
diag = list(continuous = wrap(diagFn)),#"barDiag", colour = "black")),
upper = list(continuous = wrap("cor", size = 4,color="black", alignPercent = 0.9)))+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect( colour = "black", fill = NA,size=0.25),
axis.title=element_text(size=8,face="plain",color="grey30"),
axis.text = element_text(size=8,face="plain",color="grey30"),
strip.background = element_blank())
#---------------------------------图7-3-1 矩阵散点图(b)多数据系列 -------------------------
library(wesanderson)
ggpairs_theme <- theme_bw()+theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect( colour = "black", fill = NA,size=0.25),
axis.title=element_text(size=8,face="plain",color="grey30"),
axis.text = element_text(size=8,face="plain",color="grey30"),
strip.background = element_blank())
ggplot <- function(...) ggplot2::ggplot(...) + scale_fill_manual(values=wes_palette(n=3, name="Darjeeling1"))+
scale_color_manual(values=wes_palette(n=3, name="Darjeeling1"))
#ggplot<-function(...) ggplot2::ggplot(...) + scale_colour_brewer(palette="Set1")
unlockBinding("ggplot",parent.env(asNamespace("GGally")))
assign("ggplot",ggplot,parent.env(asNamespace("GGally")))
ggpairs(iris, columns =1:4, mapping = ggplot2::aes(fill = Species,colour=Species),
lower=list(continuous = wrap("points",size=1,shape=21)),#,colour="black"
diag = list(continuous = wrap("densityDiag",alpha=0.5,colour="black",size=0.25)),
upper= list(continuous = wrap("cor",size = 3, alignPercent = 0.9)))+
ggpairs_theme
#EasyCharts团队出品，如有商用必究，
#如需使用与深入学习，请联系微信：EasyCharts
library(graphics)
library(psych)
pairs.panels(iris[,-5],
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
# Customize upper panel
upper.panel<-function(x, y){
points(x,y, pch=19, col=c("red", "green3", "blue")[iris$Species])
r <- round(cor(x, y), digits=2)
txt <- paste0("R = ", r)
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
text(0.5, 0.9, txt)
}
pairs(iris[,1:4], lower.panel = NULL,
upper.panel = upper.panel)
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
#相关系数求取
df<-iris[, 1:4]
r <- round(cor(df, df), digits=2)
txt <- paste0("R = ", r)
#library(devtools)
#install_github("ggobi/ggally")
#-------------------------------图7-3-1 矩阵散点图(a)单数据系列 ----------------------------------------------
lowerFn <- function(data, mapping, method = "loess", ...) {
p <- ggplot(data = data, mapping = mapping) +
geom_point(size=1)+#colour = "blue") +
geom_smooth(method = method, color = "red", ...)+
theme(panel.background = element_rect(fill = "white", colour = "grey20"))
p
}
diagFn <- function(data, mapping, method = "loess", ...) {
p <- ggplot(data = data, mapping = mapping) +
geom_histogram(colour = "black",size=0.1)+#)
#geom_smooth(method = method, color = "red", ...)+
theme(panel.background = element_rect(fill = "white", colour = "grey20"))
p
}
ggpairs(df,
lower = list(continuous = wrap(lowerFn, method = "lm")),
diag = list(continuous = wrap(diagFn)),#"barDiag", colour = "black")),
upper = list(continuous = wrap("cor", size = 4,color="black", alignPercent = 0.9)))+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect( colour = "black", fill = NA,size=0.25),
axis.title=element_text(size=8,face="plain",color="grey30"),
axis.text = element_text(size=8,face="plain",color="grey30"),
strip.background = element_blank())
#---------------------------------图7-3-1 矩阵散点图(b)多数据系列 -------------------------
library(wesanderson)
ggpairs_theme <- theme_bw()+theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect( colour = "black", fill = NA,size=0.25),
axis.title=element_text(size=8,face="plain",color="grey30"),
axis.text = element_text(size=8,face="plain",color="grey30"),
strip.background = element_blank())
ggplot <- function(...) ggplot2::ggplot(...) + scale_fill_manual(values=wes_palette(n=3, name="Darjeeling1"))+
scale_color_manual(values=wes_palette(n=3, name="Darjeeling1"))
#ggplot<-function(...) ggplot2::ggplot(...) + scale_colour_brewer(palette="Set1")
unlockBinding("ggplot",parent.env(asNamespace("GGally")))
assign("ggplot",ggplot,parent.env(asNamespace("GGally")))
ggpairs(iris, columns =1:4, mapping = ggplot2::aes(fill = Species,colour=Species),
lower=list(continuous = wrap("points",size=1,shape=21)),#,colour="black"
diag = list(continuous = wrap("densityDiag",alpha=0.5,colour="black",size=0.25)),
upper= list(continuous = wrap("cor",size = 3, alignPercent = 0.9)))+
ggpairs_theme
#EasyCharts团队出品，如有商用必究，
#如需使用与深入学习，请联系微信：EasyCharts
#--------------------------------------------图7-4-1 热力图 方法1---------------------------------------------------
library(ComplexHeatmap)
library(circlize)
library(dendextend)
df<-scale(mtcars) #使用scale方法来对数据进行标准化，以消除量纲对数据结构的影响
row_dend = hclust(dist(df))   # 根据行对数据进行系统性聚类
col_dend = hclust(dist(t(df)))  # 根据列对数据进行系统性聚类
mycol <-rev(brewer.pal(n = 7, name = "RdYlBu")) #构造颜色映射方案
Heatmap(df, col = mycol,name = "mtcars",rect_gp = gpar(col = "black"),
column_dend_height = unit(4, "cm"), #设定列聚类显示部分的高度
row_dend_width = unit(4, "cm"),    #设定行聚类显示部分的宽度
cluster_rows = color_branches(row_dend, k = 4), #设定行聚类成4类
cluster_columns = color_branches(col_dend, k = 2)) #设定列聚类成2类
#------------------------------------------图7-4-1 热力图 方法2-----------------------------------------------------
library(gplots)
colormap <- colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(100)
# order for rows
Rowv  <- mtcars %>% scale %>% dist %>% hclust %>% as.dendrogram %>%
set("branches_k_color", k = 4) %>% set("branches_lwd", 1.2) %>%
ladderize
# Order for columns
Colv  <- mtcars %>% scale %>% t %>% dist %>% hclust %>% as.dendrogram %>%
set("branches_k_color", k = 2, value = c("orange", "blue")) %>%
set("branches_lwd", 1.2) %>%
ladderize
heatmap.2(scale(mtcars), scale = "none", col = colormap,
Rowv = Rowv, Colv = Colv,
trace = "none", density.info = "none")
#-----------------------------------图7-4-1 热力图：方法3------------------------------------------------
library(RColorBrewer)
library(pheatmap)
colormap <- colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(100)
breaks = seq(min(unlist(c(df))), max(unlist(c(df))), length.out=100)
pheatmap(df, color=colormap, breaks=breaks,border_color="black",
cutree_col = 2,cutree_row = 4)
#EasyCharts团队出品，如有商用必究，
#如需使用与深入学习，请联系微信：EasyCharts
library(RColorBrewer)
library(pheatmap)
library(cowplot)
set.seed(1020543)
df1<- data.frame(matrix(rnorm(100,10,3), ncol=10))
colnames(df1) <-LETTERS[1:10]
rownames(df1) <- letters[1:10]
df2<- data.frame(matrix(rnorm(100,15,5), ncol=10))
colnames(df2) <-LETTERS[1:10]
rownames(df2) <- letters[1:10]
Colormap <- colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(100)
breaks <- seq(min(unlist(c(df1, df2))), max(unlist(c(df1, df2))), length.out=100)
p1<- pheatmap(df1, color=Colormap, breaks=breaks,border_color="black",legend=TRUE)
p2 <- pheatmap(df2, color=Colormap, breaks=breaks,border_color="black",legend=TRUE)
plot_grid( p1$gtable, p2$gtable,align = 'vh',labels = c("A", "B"),ncol = 2)
#EasyCharts团队出品，如有商用必究，
#如需使用与深入学习，请联系微信：EasyCharts
library(GGally)
dlarge <-read.csv("Parallel_Coordinates_Data.csv", header=TRUE,check.names=FALSE)
dlarge<-transform(dlarge, Class=ifelse(reading> 523, "Class1", "Class2"))
ggparcoord(data = dlarge, columns = 1:6, mapping=aes(color=Class),#groupColumn = 5, order = "anyClass",
groupColumn=7,#"cut",
showPoints = FALSE, boxplot = FALSE,#title = "Parallel Coordinate Plot for the Iris Data",
alphaLines = 0.7)+#,,splineFactor =TRUE
scale_x_discrete(position = "top")+
scale_colour_manual(values=c("#90C539","#45BFFC" ))+
xlab("")+
theme_minimal()+
theme(
#strip.text = element_text(size=13,face="plain",color="black"),
#text=element_text(size=12,face="plain",color="black"),
axis.title=element_text(size=15,face="plain",color="black"),
axis.text = element_text(size=10,face="plain",color="black"),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.grid.major.x=element_line(size=1),
legend.text  = element_text(size=11,face="plain",color="black"),
legend.title =element_blank(),
#legend.position = "right",
axis.line.y=element_line(size=1,colour="grey70"),
axis.ticks.y=element_line(size=1,colour="grey70"),
legend.position=c(0.82,0.1)
#legend.background = element_rect(fill=alpha("white",0))
)
#EasyCharts团队出品，如有商用必究，
#如需使用与深入学习，请联系微信：EasyCharts
#--------------------------图7-6-1 Radviz图 (b)多数据系列----------------------------------
library(ggplot2)
library(wesanderson)
library(Radviz)
data(iris)
das <- c('Sepal.Length','Sepal.Width','Petal.Length','Petal.Width')
S <- make.S(das)
scaled <- apply(iris[,das],2,do.L)
rv <- do.radviz(scaled,S)
sim.mat <- cosine(scaled)
in.da(S,sim.mat)
new <- do.optim(S,sim.mat,iter=10,n=100)
new.S <- make.S(get.optim(new))
new.rv <- do.radviz(scaled,new.S)
pop.cols <- setNames(c(wes_palette(n=3, name="Darjeeling1")),levels(iris$Species))
p<-bubbleRadviz(new.rv,
bubble.color=c(wes_palette(n=3, name="Darjeeling1"))
[as.integer(iris$Species)],
bubble.fg='black',
scale=0.05,
decreasing=TRUE
)
# prepare "circle data"
radius <- 0.95
theta <- seq(0, 2 * pi, length = 200)
p<-p+lines(x = radius * cos(theta), y = radius * sin(theta))
legend( "bottomright",
legend=names(pop.cols),
col=pop.cols,
cex=1,
pch=15,
bty='n')
p
#EasyCharts团队出品，如有商用必究，
#如需使用与深入学习，请联系微信：EasyCharts
library(aplpack)
library(RColorBrewer)
crime <- read.csv("Faces_Data.csv")
crime_filled <- cbind(crime[,1:6], rep(0, length(crime$state)), crime[,7:8])
crime_filled<-crime_filled[order(crime_filled$murder,decreasing=T),]
faces(crime_filled[,2:8],
col.face = colorRampPalette(brewer.pal(9, "Reds"))(20),
col.hair= colorRampPalette(brewer.pal(9, "Blues"))(20),
labels= crime_filled$state,
cex=1)
#EasyCharts团队出品，如有商用必究，
#如需使用与深入学习，请联系微信：EasyCharts
library(ggplot2)
library(tabplot)
#devtools::install_github("mtennekes/tabplot")
library(RColorBrewer)
tabplot::tableplot(diamonds, sortCol =price,
select = c(price,carat,cut, color, clarity,depth, table),
pals = list(cut=palette(brewer.pal(9,"Purples"))[c(2,3,4,5,7,8)],
color=palette(brewer.pal(9,"Oranges"))[c(2:9)],
clarity=palette(brewer.pal(9,"Greens"))[1:8]),
fontsize = 9)
#EasyCharts团队出品，如有商用必究，
#如需使用与深入学习，请联系微信：EasyCharts
library(ggplot2)
library(tabplot)
#devtools::install_github("mtennekes/tabplot")
library(RColorBrewer)
tabplot::tableplot(diamonds, sortCol =price,
select = c(price,carat,cut, color, clarity,depth, table),
pals = list(cut=palette(brewer.pal(9,"Purples"))[c(2,3,4,5,7,8)],
color=palette(brewer.pal(9,"Oranges"))[c(2:9)],
clarity=palette(brewer.pal(9,"Greens"))[1:8]),
fontsize = 9)
