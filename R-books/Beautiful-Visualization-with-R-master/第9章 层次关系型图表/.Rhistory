name = list_unique,
value = vertices[list_unique,'value']
)
vertices$group<-edges$from[ match( vertices$name, edges$to ) ]
vertices$id<-NA
myleaves<-which(is.na( match(vertices$name, edges$from) ))
nleaves<-length(myleaves)
vertices$id<-90
vertices$id[myleaves]<-0
vertices$angle<-90 - vertices$id
mygraph <- graph_from_data_frame( edges, vertices = vertices, directed = TRUE )
ggraph(mygraph, layout = 'dendrogram', circular = FALSE) +
geom_edge_diagonal(aes(colour=..index..)) +
scale_edge_colour_distiller(palette = "RdPu") +
geom_node_text(aes(x = x, y=y,  angle = angle,  label=name,color=group),
hjust=1.25,size=2.7, alpha=1) +
geom_node_point(aes( x = x, y=y, fill=group, size=value),
shape=21,stroke=0.2,color='black',alpha=0.9) +
scale_colour_manual(values= rep( brewer.pal(9,"Paired") , 30)) +
scale_fill_manual(values= rep( brewer.pal(9,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,7) ) +
expand_limits(x = c(-1.3, 1.3), y = c(-1.3, 1.3))+
theme_void() +
theme(
legend.position="none",
plot.margin=unit(c(0,0,0,0),"cm"))
#EasyCharts团队出品，
#如需使用与深入学习，请联系微信：EasyCharts
#Referre: https://jokergoo.github.io/circlize_book/book/graphics.html#links
library(circlize)
library(RColorBrewer)
library(ComplexHeatmap)
col <- colorRamp2(seq(-2,2,length.out=7),rev(brewer.pal(n = 7, name = "RdYlBu")))
set.seed(1234)
data <- matrix(rnorm(100 * 10), nrow = 10, ncol = 100)
factors <- rep(letters[1:2], times = c(30, 70))
data_list <- list(a = data[, factors == "a"], b = data[, factors == "b"])
dend_list <- list(a = as.dendrogram(hclust(dist(t(data_list[["a"]])))),
b = as.dendrogram(hclust(dist(t(data_list[["b"]])))))
circlize_plot = function() {
circos.par(cell.padding = c(0, 0, 0, 0), gap.degree = 5)
circos.initialize(factors = factors, xlim = cbind(c(0, 0), table(factors)))
circos.track(ylim = c(0, 10), bg.border = NA,
panel.fun = function(x, y) {
sector.index = get.cell.meta.data("sector.index")
d = data_list[[sector.index]]
dend = dend_list[[sector.index]]
d2 = d[, order.dendrogram(dend)]
col_data = col(d2)
nr = nrow(d2)
nc = ncol(d2)
for (i in 1:nr) {
circos.rect(1:nc - 1, rep(nr - i, nc), 1:nc, rep(nr - i + 1, nc),
border = 'black', col = col_data[i, ],size=0.1) }
circos.text(CELL_META$xcenter,  CELL_META$cell.ylim[1] + uy(25, "mm"),
CELL_META$sector.index)
circos.axis(labels.cex = 1, major.at = seq(0.5, round(CELL_META$xlim[2])+0.5,2),
labels=seq(0, round(CELL_META$xlim[2]),2))
circos.yaxis(labels.cex = 0.5,at = seq(0.5, round(CELL_META$ylim[2])+0.5,1),
labels=letters[1:10])
})
max_height <- max(sapply(dend_list, function(x) attr(x, "height")))
circos.track(ylim = c(0, max_height),
bg.border = NA, track.height = 0.5,
panel.fun = function(x, y) {
sector.index = get.cell.meta.data("sector.index")
dend = dend_list[[sector.index]]
circos.dendrogram(dend, max_height = max_height)})
circos.clear()
}
lgd_links = Legend(at = c(-2, -1, 0, 1, 2), col_fun = col,
title_position = "topleft", title = "value")
circlize_plot()
w <- grobWidth(lgd_links)
h <- grobHeight(lgd_links)
vp <- viewport(x = unit(1, "npc") - unit(2, "mm"),
y = unit(4, "mm"),
width = w,
height = h,
just = c("right", "bottom"))
pushViewport(vp)
grid.draw(lgd_links)
#EasyCharts团队出品，
#如需使用与深入学习，请联系微信：EasyCharts
library(igraph)
library(ggraph)
flare$vertices$shortName[flare$vertices$size<5000]<-""
gr <- graph_from_data_frame(flare$edges, vertices = flare$vertices)
ggraph(gr, 'treemap', weight = 'size') + geom_node_tile()
# We can color by modifying the graph
gr <- tree_apply(gr, function(node, parent, depth, tree) {
if (depth == 1) {
tree <- set_vertex_attr(tree, 'Class', node, V(tree)$name[node])
} else if (depth > 1) {
tree <- set_vertex_attr(tree, 'Class', node, V(tree)$Class[parent])
}
tree
})
ggraph(gr, 'treemap', weight = 'size') +
geom_node_tile(aes(fill = Class, filter = leaf, alpha = depth), colour = 'white') +
#geom_node_tile(aes(size = depth), colour = 'white') +
geom_node_text(aes(label=shortName,size = depth),color="black") +
scale_alpha(range = c(1, 0.5), guide = 'none') +
scale_size(range = c(6,2), guide = 'none')
library(ggraph)
library(igraph)
library(RColorBrewer)
library(dplyr)
df<-read.csv('旭日图.csv',header=TRUE,stringsAsFactors=FALSE)
edges<- data.frame(rbind(
cbind(rep('origin',4),unique(as.character(df$Season))),
as.matrix(df[!duplicated(df[c('Season','Month')]),1:2]),
as.matrix(df[!duplicated(df[c('Month','Week')]),2:3])))
colnames(edges)<-c('from','to')
vertices0<-data.frame(name=unique(c(as.character(edges$from), as.character(edges$to))))
df_leaf<-df[,c('Week','Value','label')]
df_leaf$angle<-90-(1:nrow(df_leaf))/nrow(df_leaf)*360
df_leaf$angle<-ifelse(df_leaf$angle< -90, df_leaf$angle+180, df_leaf$angle)
vertices<-left_join(vertices0,df_leaf,by=c('name'='Week'))
graph <- graph_from_data_frame(edges, vertices = vertices)
ggraph(graph, layout ='partition', circular = TRUE) +
geom_node_arc_bar(aes(filter =(depth<=2 & depth>0 )),fill='#FEE5D9',color='black',size=0.1)+#,size=size
geom_node_arc_bar(aes(filter =(depth==3 ),fill = Value),size=0.1)+
geom_node_text( aes(filter =(depth<=2 & depth>0 ),label=name,size=-depth),angle=0,colour="black") +
geom_node_text(aes(label=label,angle=angle),size=2,colour="black") +
scale_size(range=c(3,5))+
coord_fixed()+
scale_fill_distiller(palette='Reds')+
guides(size="none")+
theme_void()
ggraph(graph, layout ='partition') +
#geom_node_tile(aes(fill = as.factor(depth)), size = 0.25)+
#geom_node_tile(aes(filter =(depth<=3 ),fill = Season),size = 0.1)+
geom_node_tile(aes(filter =(depth<=2)),fill='#FEE5D9',color='black',size=0.1)+#,size=size
geom_node_tile(aes(filter =(depth==3 ),fill = Value),size=0.1)+
geom_node_text(aes(filter =(depth<=2 & depth>0),label=name,size=-depth),angle=90,colour="black") +
geom_node_text(aes(label=label),size=2,angle=90,colour="black")+
scale_size(range=c(3,4))+
scale_y_reverse()+
scale_fill_distiller(palette="Reds",na.value = "#FFF2EC")+
guides(size="none")+
theme_void()
ggraph(graph, layout ='partition', circular = TRUE) +
geom_node_arc_bar(aes(filter =(depth<=2 & depth>0 )),fill='#FEE5D9',color='black',size=0.1)+#,size=size
geom_node_arc_bar(aes(filter =(depth==3 ),fill = Value),size=0.1)+
geom_node_text( aes(filter =(depth<=2 & depth>0 ),label=name,size=-depth),angle=0,colour="black") +
geom_node_text(aes(label=label,angle=angle),size=2,colour="black") +
scale_size(range=c(3,5))+
coord_fixed()+
scale_fill_distiller(palette='Reds')+
guides(size="none")+
theme_void()
ggraph(graph, layout ='partition') +
#geom_node_tile(aes(fill = as.factor(depth)), size = 0.25)+
#geom_node_tile(aes(filter =(depth<=3 ),fill = Season),size = 0.1)+
geom_node_tile(aes(filter =(depth<=2)),fill='#FEE5D9',color='black',size=0.1)+#,size=size
geom_node_tile(aes(filter =(depth==3 ),fill = Value),size=0.1)+
geom_node_text(aes(filter =(depth<=2 & depth>0),label=name,size=-depth),angle=90,colour="black") +
geom_node_text(aes(label=label),size=2,angle=90,colour="black")+
scale_size(range=c(3,4))+
scale_y_reverse()+
scale_fill_distiller(palette="Reds",na.value = "#FFF2EC")+
guides(size="none")+
theme_void()
fake_circle<-c()
for (i in 1:nrow(df)){
fake_circle<-append(fake_circle,rep(df$Week[i],round(10*df$Value[i])))
}
edges<- data.frame(rbind(
cbind(rep('origin',4),unique(as.character(df$Season))),
as.matrix(df[!duplicated(df[c('Season','Month')]),1:2]),
as.matrix(df[!duplicated(df[c('Month','Week')]),2:3]),
cbind(fake_circle,as.character(1:length(fake_circle)))
))
colnames(edges)<-c('from','to')
vertices0<-data.frame(name=unique(c(as.character(edges$from), as.character(edges$to))))
df_leaf<-df[,c('Week','Value','label')]
df_leaf$angle<-90-(cumsum(df_leaf$Value)-df_leaf$Value/2)/sum(df_leaf$Value)*360
df_leaf$angle<-ifelse(df_leaf$angle< -90, df_leaf$angle+180, df_leaf$angle)
vertices<-left_join(vertices0,df_leaf,by=c('name'='Week'))
df_color<- data.frame(rbind(
as.matrix(df[!duplicated(df[c('Season','Season')]),c(1,1)]),
as.matrix(df[!duplicated(df[c('Season','Month')]),c(1,2)]),
as.matrix(df[!duplicated(df[c('Season','Week')]),c(1,3)])
))
colnames(df_color)<-c('Season','name')
vertices<-left_join(vertices,df_color,by='name')
graph <- graph_from_data_frame(edges, vertices = vertices)
ggraph(graph, layout ='partition', circular = TRUE) +
geom_node_arc_bar(aes(filter =(depth<=3 & depth>0 ),fill = Season),size=0.1)+
geom_node_text(aes(filter =(depth<=2 & depth>0),label=name,size=-depth),angle=0,colour="black") +
geom_node_text(aes(label=label,angle=angle),size=2,colour="black")+
scale_size(range=c(3,4))+
coord_fixed()+
scale_fill_brewer(palette="Reds",direction=-1)+
guides(size="none",fill="none")+
theme_void()
ggraph(graph, layout ='partition')+
geom_node_tile(aes(filter =(depth<=3 ),fill = Season),size = 0.1)+
geom_node_text(aes(filter =(depth<=2 & depth>0),label=name,size=-depth),angle=90,colour="black") +
geom_node_text(aes(label=label),size=2,angle=90,colour="black")+
scale_size(range=c(3,4))+
scale_y_reverse()+
scale_fill_brewer(palette="Reds",na.value = "#FFF2EC")+
guides(size="none",fill="none")+
theme_void()
#EasyCharts团队出品，
#如需使用与深入学习，请联系微信：EasyCharts
library(ggraph)
library(igraph)
library(RColorBrewer)
library(dplyr)
df<-read.csv('旭日图.csv',header=TRUE,stringsAsFactors=FALSE)
edges<- data.frame(rbind(
cbind(rep('origin',4),unique(as.character(df$Season))),
as.matrix(df[!duplicated(df[c('Season','Month')]),1:2]),
as.matrix(df[!duplicated(df[c('Month','Week')]),2:3])))
colnames(edges)<-c('from','to')
vertices0<-data.frame(name=unique(c(as.character(edges$from), as.character(edges$to))))
df_leaf<-df[,c('Week','Value','label')]
df_leaf$angle<-90-(1:nrow(df_leaf))/nrow(df_leaf)*360
df_leaf$angle<-ifelse(df_leaf$angle< -90, df_leaf$angle+180, df_leaf$angle)
vertices<-left_join(vertices0,df_leaf,by=c('name'='Week'))
graph <- graph_from_data_frame(edges, vertices = vertices)
ggraph(graph, layout ='partition', circular = TRUE) +
geom_node_arc_bar(aes(filter =(depth<=2 & depth>0 )),fill='#FEE5D9',color='black',size=0.1)+#,size=size
geom_node_arc_bar(aes(filter =(depth==3 ),fill = Value),size=0.1)+
geom_node_text( aes(filter =(depth<=2 & depth>0 ),label=name,size=-depth),angle=0,colour="black") +
geom_node_text(aes(label=label,angle=angle),size=2,colour="black") +
scale_size(range=c(3,5))+
coord_fixed()+
scale_fill_distiller(palette='Reds')+
guides(size="none")+
theme_void()
ggraph(graph, layout ='partition') +
#geom_node_tile(aes(fill = as.factor(depth)), size = 0.25)+
#geom_node_tile(aes(filter =(depth<=3 ),fill = Season),size = 0.1)+
geom_node_tile(aes(filter =(depth<=2)),fill='#FEE5D9',color='black',size=0.1)+#,size=size
geom_node_tile(aes(filter =(depth==3 ),fill = Value),size=0.1)+
geom_node_text(aes(filter =(depth<=2 & depth>0),label=name,size=-depth),angle=90,colour="black") +
geom_node_text(aes(label=label),size=2,angle=90,colour="black")+
scale_size(range=c(3,4))+
scale_y_reverse()+
scale_fill_distiller(palette="Reds",na.value = "#FFF2EC")+
guides(size="none")+
theme_void()
fake_circle<-c()
for (i in 1:nrow(df)){
fake_circle<-append(fake_circle,rep(df$Week[i],round(10*df$Value[i])))
}
edges<- data.frame(rbind(
cbind(rep('origin',4),unique(as.character(df$Season))),
as.matrix(df[!duplicated(df[c('Season','Month')]),1:2]),
as.matrix(df[!duplicated(df[c('Month','Week')]),2:3]),
cbind(fake_circle,as.character(1:length(fake_circle)))
))
colnames(edges)<-c('from','to')
vertices0<-data.frame(name=unique(c(as.character(edges$from), as.character(edges$to))))
df_leaf<-df[,c('Week','Value','label')]
df_leaf$angle<-90-(cumsum(df_leaf$Value)-df_leaf$Value/2)/sum(df_leaf$Value)*360
df_leaf$angle<-ifelse(df_leaf$angle< -90, df_leaf$angle+180, df_leaf$angle)
vertices<-left_join(vertices0,df_leaf,by=c('name'='Week'))
df_color<- data.frame(rbind(
as.matrix(df[!duplicated(df[c('Season','Season')]),c(1,1)]),
as.matrix(df[!duplicated(df[c('Season','Month')]),c(1,2)]),
as.matrix(df[!duplicated(df[c('Season','Week')]),c(1,3)])
))
colnames(df_color)<-c('Season','name')
vertices<-left_join(vertices,df_color,by='name')
graph <- graph_from_data_frame(edges, vertices = vertices)
ggraph(graph, layout ='partition', circular = TRUE) +
geom_node_arc_bar(aes(filter =(depth<=3 & depth>0 ),fill = Season),size=0.1)+
geom_node_text(aes(filter =(depth<=2 & depth>0),label=name,size=-depth),angle=0,colour="black") +
geom_node_text(aes(label=label,angle=angle),size=2,colour="black")+
scale_size(range=c(3,4))+
coord_fixed()+
scale_fill_brewer(palette="Reds",direction=-1)+
guides(size="none",fill="none")+
theme_void()
ggraph(graph, layout ='partition', circular = TRUE) +
geom_node_arc_bar(aes(filter =(depth<=3 & depth>0 ),fill = Season),size=0.1)+
geom_node_text(aes(filter =(depth<=2 & depth>0),label=name,size=-depth),angle=0,colour="black") +
geom_node_text(aes(label=label,angle=angle),size=2,colour="black")+
scale_size(range=c(3,4))+
coord_fixed()+
scale_fill_brewer(palette="Reds",direction=-1)+
guides(size="none",fill="none")+
theme_void()
library(ggforce)
sizes <- sample(10, 100, TRUE)
position <- pack_circles(sizes)
data <- data.frame(x = position[,1], y = position[,2], r = sqrt(sizes/pi))
ggplot() +
geom_circle(aes(x0 = 0, y0 = 0, r = attr(position, 'enclosing_radius')*0.95)) +
geom_circle(aes(x0 = x, y0 = y, r = r), data = data, fill = 'steelblue') +
geom_polygon(aes(x = x, y = y),
data = data[attr(position, 'front_chain'), ],
fill = NA,
colour = NA)+
coord_fixed()
#EasyCharts团队出品，
#如需使用与深入学习，请联系微信：EasyCharts
library(igraph)
library(ggraph)
flare$vertices$shortName[flare$vertices$size<5000]<-""
gr <- graph_from_data_frame(flare$edges, vertices = flare$vertices)
ggraph(gr, 'treemap', weight = 'size') + geom_node_tile()
# We can color by modifying the graph
gr <- tree_apply(gr, function(node, parent, depth, tree) {
if (depth == 1) {
tree <- set_vertex_attr(tree, 'Class', node, V(tree)$name[node])
} else if (depth > 1) {
tree <- set_vertex_attr(tree, 'Class', node, V(tree)$Class[parent])
}
tree
})
ggraph(gr, 'treemap', weight = 'size') +
geom_node_tile(aes(fill = Class, filter = leaf, alpha = depth), colour = 'white') +
#geom_node_tile(aes(size = depth), colour = 'white') +
geom_node_text(aes(label=shortName,size = depth),color="black") +
scale_alpha(range = c(1, 0.5), guide = 'none') +
scale_size(range = c(6,2), guide = 'none')
#EasyCharts团队出品，如有商用必究，
#如需使用与深入学习，请联系微信：EasyCharts
#------------------------------不同类型的树形图(a)------------------------------------
library(factoextra)
data(USArrests)
dd <- dist(scale(datasets::mtcars), method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
fviz_dend(hc, k = 4, # 聚类的类别数目为4
cex = 0.8, # 数据标签的字体大小
k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = FALSE, # 数据标签也根据颜色设定
rect_border = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
rect = TRUE, # 使用不同颜色的矩形框标定类别
rect_fill = TRUE)
fviz_dend(hc, k = 4, cex = 0.8, horiz = TRUE,
k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),# k_colors = "jco",
color_labels_by_k = FALSE, # 数据标签也根据颜色设定
rect_border = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
rect = TRUE,rect_fill = TRUE)
par(mar = rep(300,4))
fviz_dend(hc, cex = 0.8, k = 4,
color_labels_by_k = FALSE, # 数据标签也根据颜色设定
k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
type = "circular",#phylogenic",
#labels_track_height = 0.1,
repel = TRUE,
rect_lty = 0.5)
#EasyCharts团队出品，如有商用必究，
#如需使用与深入学习，请联系微信：EasyCharts
library(ggraph)
library(igraph)
library(tidyverse)
library(viridis)
data(flare)
# Create a subset of the dataset (I remove 1 level)
edges<-flare$edges %>% filter(to %in% from) %>% droplevels()
vertices <- flare$vertices %>% filter(name %in% c(edges$from, edges$to)) %>% droplevels()
vertices$size<-runif(nrow(vertices))
# Rebuild the graph object
mygraph <- graph_from_data_frame( edges, vertices=vertices )
colormap <- colorRampPalette(rev(brewer.pal(9,'YlGnBu')))(32)
ggraph(mygraph, layout = 'circlepack', weight="size" ) +
geom_node_circle(aes(fill = depth)) +
geom_node_text( aes(label=shortName, filter=leaf, fill=depth, size=size)) +
theme_void() +
theme(legend.position="FALSE") +
scale_fill_gradientn(colors=colormap)
#scale_fill_viridis()
library(ggraph)
library(igraph)
library(dplyr)
df <- data.frame(group=c("root", "root", "a","a","b","b","b"),
subitem=c("a", "b", "x","y","z","u","v"),
size=c(0, 0, 6,2,3,2,5))
# create a dataframe with the vertices' attributes
vertices <- df %>%
distinct(subitem, size) %>%
add_row(subitem = "root", size = 0)
graph <- graph_from_data_frame(df, vertices = vertices)
ggraph(graph, layout = "circlepack", weight = 'size') +
geom_node_circle(aes(fill =depth)) +
# adding geom_text to see which circle is which node
geom_text(aes(x = x, y = y, label = paste(name, "size=", size))) +
coord_fixed()
#EasyCharts团队出品，如有商用必究，
#如需使用与深入学习，请联系微信：EasyCharts
#------------------------------------------------图7-3-2 树状图(a)----------------------------------------------------------------------
library(treemap)
library(RColorBrewer)
proglangs <- read.csv("Treemap_Data.csv ")
treemap(proglangs,
index=c("parent", "id"),
vSize="value",
vColor="parent",
type="index",
border.lwds=c(2,0.1),
fontcolor.labels=c('white',"grey10"),
title="",
align.labels = list(c("center", "center"), c("right", "bottom")),
fontsize.labels=c(12, 9),
palette="Set1")
library(treemap)
library(RColorBrewer)
proglangs <- read.csv("Treemap_Data.csv ")
treemap(proglangs,
index=c("parent", "id"),
vSize="value",
vColor="parent",
type="index",
border.lwds=c(2,0.1),
fontcolor.labels=c('white',"grey10"),
title="",
align.labels = list(c("center", "center"), c("right", "bottom")),
fontsize.labels=c(12, 9),
palette="Set1")
library(ggplot2)
library(treemapify) #devtools::install_github("wilkox/treemapify")
proglangs <- read.csv("Treemap_Data.csv")
treeMapCoordinates <- treemapify(proglangs,
area = "value",
subgroup = "parent")
Class_Label1<-aggregate(cbind(xmin,ymin)~parent,treeMapCoordinates,min)
Class_Label2<-aggregate(cbind(xmax,ymax)~parent,treeMapCoordinates,max)
Class_Label<-cbind(Class_Label1,Class_Label2)
treeMapCoordinates$Area<-(treeMapCoordinates$xmax-treeMapCoordinates$xmin)*(treeMapCoordinates$ymax-treeMapCoordinates$ymin)
treeMapCoordinates$label<-treeMapCoordinates$id
treeMapCoordinates$label[treeMapCoordinates$Area<=0.005]<-""
ggplot(treeMapCoordinates)+
geom_rect(aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax,fill=parent),colour="black")+
geom_text(aes(x=(xmax+xmin)/2,y=ymin+(ymax-ymin)/3,label=label,size=Area))+
scale_size(range=c(2.5,4))+
geom_label(aes(x=(xmin+xmax)/2,y=(ymin+ymax)/2,label=parent),data=Class_Label,size=5,fill="white",alpha=0.5)+
theme_void()+
theme(legend.position = "none")
library(ggplot2)
library(treemapify) #devtools::install_github("wilkox/treemapify")
proglangs <- read.csv("Treemap_Data.csv")
treeMapCoordinates <- treemapify(proglangs,
area = "value",
subgroup = "parent")
Class_Label1<-aggregate(cbind(xmin,ymin)~parent,treeMapCoordinates,min)
Class_Label2<-aggregate(cbind(xmax,ymax)~parent,treeMapCoordinates,max)
Class_Label<-cbind(Class_Label1,Class_Label2)
treeMapCoordinates$Area<-(treeMapCoordinates$xmax-treeMapCoordinates$xmin)*(treeMapCoordinates$ymax-treeMapCoordinates$ymin)
treeMapCoordinates$label<-treeMapCoordinates$id
treeMapCoordinates$label[treeMapCoordinates$Area<=0.005]<-""
ggplot(treeMapCoordinates)+
geom_rect(aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax,fill=parent),colour="black")+
geom_text(aes(x=(xmax+xmin)/2,y=ymin+(ymax-ymin)/3,label=label,size=Area))+
scale_size(range=c(2.5,4))+
geom_label(aes(x=(xmin+xmax)/2,y=(ymin+ymax)/2,label=parent),data=Class_Label,size=5,fill="white",alpha=0.5)+
theme_void()+
theme(legend.position = "none")
#print(treeMapPlot)
library(ggplot2)
library(treemapify) #devtools::install_github("wilkox/treemapify")
proglangs <- read.csv("Treemap_Data.csv")
treeMapCoordinates <- treemapify(proglangs,
area = "value",
fill="parent",
group = "parent",
label='id')
Class_Label1<-aggregate(cbind(xmin,ymin)~group,treeMapCoordinates,min)
Class_Label2<-aggregate(cbind(xmax,ymax)~group,treeMapCoordinates,max)
Class_Label<-cbind(Class_Label1,Class_Label2[c('xmax','ymax')])
treeMapCoordinates$Area<-(treeMapCoordinates$xmax-treeMapCoordinates$xmin)*(treeMapCoordinates$ymax-treeMapCoordinates$ymin)
#treeMapCoordinates$label<-treeMapCoordinates$id
treeMapCoordinates$label[treeMapCoordinates$Area<=50]<-""
ggplot(treeMapCoordinates)+
geom_rect(aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax,fill=group),colour="black")+
geom_text(aes(x=xmin+(xmax-xmin)/2,y=ymin+(ymax-ymin)/4,label=label,size=Area))+
scale_size(range=c(2,5))+
geom_label(aes(x=(xmin+xmax)/2,y=(ymin+ymax)/2,label=group),data=Class_Label,size=5,fill="white",alpha=0.5)+
theme_void()+
theme(legend.position = "none")
#print(treeMapPlot)
library(ggplot2)
library(treemapify) #devtools::install_github("wilkox/treemapify")
proglangs <- read.csv("Treemap_Data.csv")
treeMapCoordinates <- treemapify(proglangs,
area = "value",
fill="parent",
group = "parent",
label='id')
Class_Label1<-aggregate(cbind(xmin,ymin)~group,treeMapCoordinates,min)
Class_Label2<-aggregate(cbind(xmax,ymax)~group,treeMapCoordinates,max)
Class_Label<-cbind(Class_Label1,Class_Label2[c('xmax','ymax')])
treeMapCoordinates$Area<-(treeMapCoordinates$xmax-treeMapCoordinates$xmin)*(treeMapCoordinates$ymax-treeMapCoordinates$ymin)
#treeMapCoordinates$label<-treeMapCoordinates$id
treeMapCoordinates$label[treeMapCoordinates$Area<=50]<-""
ggplot(treeMapCoordinates)+
geom_rect(aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax,fill=group),colour="black")+
geom_text(aes(x=xmin+(xmax-xmin)/2,y=ymin+(ymax-ymin)/4,label=label,size=Area))+
scale_size(range=c(2,5))+
geom_label(aes(x=(xmin+xmax)/2,y=(ymin+ymax)/2,label=group),data=Class_Label,size=5,fill="white",alpha=0.5)+
theme_void()+
theme(legend.position = "none")
#print(treeMapPlot)
#EasyCharts团队出品，
#如需使用与深入学习，请联系微信：EasyCharts
library(RColorBrewer)
library(ggplot2)
library(reshape2)
df <- read.csv("AdjacencyDirectedWeighted.csv",header=TRUE,stringsAsFactors = FALSE)
df_sum<-apply(df[,2:ncol(df)],2,sum)#+apply(df[,2:ncol(df)],1,sum)
order<-sort(df_sum,index.return=TRUE,decreasing =FALSE)
df_melt <- melt(df,id.vars = 'Region')
colnames(df_melt)<-c("from","to","value")
df_melt$to<-gsub("\\.", " ",df_melt$to)
df_melt$to<-factor(df_melt$to,levels=df$Region[order$ix],order=TRUE)
