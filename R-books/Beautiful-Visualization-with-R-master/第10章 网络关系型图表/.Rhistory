filter( group<10) %>%
arrange(desc(group),n) %>%
mutate(name=factor(name, name))
# keep only this people in edges
connect <- connect %>%
filter(from %in% vertices$name) %>%
filter(to %in% vertices$name)%>%
left_join(vertices,by=c('from'='name'))
# Create a graph object with igraph
mygraph <- graph_from_data_frame( connect, vertices = vertices, directed = FALSE )
ggraph(mygraph, layout="linear") +
#geom_edge_arc(aes(x=y, y=x, xend=yend, yend=xend, alpha = ..index..,color = node.class))+
geom_edge_arc(aes(edge_colour=as.factor(group)), edge_alpha=0.5, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(size=n, fill=as.factor(group)), shape=21,color='black',alpha=0.9,stroke=0.1) +
scale_size_continuous(range=c(0.5,10)) +
scale_fill_manual(values=mycolor) +
scale_edge_colour_manual(values=mycolor) +
#geom_node_text(aes(label=name), angle=0, hjust=1, nudge_y = -1.5, size=2) +
coord_flip()+
geom_node_text(aes(label=name,color=as.factor(group)), angle=0, hjust=1, nudge_y = -1.5, size=2) +
scale_color_manual(values=mycolor) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2))+
theme_minimal() +
theme(
legend.position="none",
panel.grid = element_blank(),
axis.line = element_blank(),
axis.ticks =element_blank(),
axis.text =element_blank(),
axis.title = element_blank()
#plot.margin=unit(c(0,0,0,0), "null"),
#panel.spacing=unit(c(0,0,0,0), "null")
)
#EasyCharts团队出品，
#如需使用与深入学习，请联系微信：EasyCharts
library(tidyverse)
library(circlize)
library(viridis)
library(igraph)
library(ggraph)
library(colormap)
library(ggplot2)
library(reshape2)
dataUU <-read.csv("AdjacencyUndirectedUnweighted.csv",header=TRUE,check.names = FALSE)
# Transform the adjacency matrix in a long format
connect <- dataUU %>%
gather(key="to", value="value", -1) %>%
mutate(to = gsub("\\.", " ",to)) %>%
na.omit()
# Number of connection per person
c( as.character(connect$from), as.character(connect$to)) %>%
as.tibble() %>%
group_by(value) %>%
summarize(n=n()) -> vertices
colnames(vertices) <- c("name", "n")
# Create a graph object with igraph
mygraph <- graph_from_data_frame( connect, vertices = vertices, directed = FALSE )
# Find community
com <- walktrap.community(mygraph)
#Reorder dataset and make the graph
vertices <- vertices %>%
mutate( group = com$membership) %>%
filter( group<10) %>%
mutate(group=as.numeric(factor(group,
levels=sort(summary (as.factor(group)),index.return=TRUE,decreasing = T)$ix,
order=TRUE)))%>%
arrange(group,desc(n)) %>%
mutate(name=factor(name, name))
# keep only this people in edges
connect <- connect %>%
filter(from %in% vertices$name) %>%
filter(to %in% vertices$name)%>%
left_join(vertices,by=c('from'='name'))
# Create a graph object with igraph
mygraph <- graph_from_data_frame( connect, vertices = vertices, directed = FALSE )
# prepare a vector of n color in the viridis scale
#mycolor <- colormap(colormap=colormaps$viridis, nshades=max(vertices$group))
library("wesanderson")
mycolor <- wes_palette("Darjeeling1", max(vertices$group), type = "continuous")
#mycolor <- sample(mycolor, length(mycolor))
#mycolor <- viridis(10, alpha = 1, begin = 0, end = 1, option = "D")
#
#mycolor <- colorRampPalette(brewer.pal(9,'YlGnBu'))(15)[4:14]
#names(mycolor) <-df$Region
# Make the graph
ggraph(mygraph, layout="linear") +
#geom_edge_arc(aes(x=y, y=x, xend=yend, yend=xend, alpha = ..index..,color = node.class))+
geom_edge_arc(aes(edge_colour=as.factor(group)), edge_alpha=0.5, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(size=n, fill=as.factor(group)), shape=21,color='black',alpha=0.9,stroke=0.1) +
scale_size_continuous(range=c(0.5,10)) +
scale_fill_manual(values=mycolor) +
scale_edge_colour_manual(values=mycolor) +
#geom_node_text(aes(label=name), angle=0, hjust=1, nudge_y = -1.5, size=2) +
#coord_flip()+
geom_node_text(aes(label=name,color=as.factor(group)), angle=90, hjust=1, nudge_y = -1.5, size=2) +
scale_color_manual(values=mycolor) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2))+
theme_minimal() +
theme(
legend.position="none",
panel.grid = element_blank(),
axis.line = element_blank(),
axis.ticks =element_blank(),
axis.text =element_blank(),
axis.title = element_blank()
#plot.margin=unit(c(0,0,0,0), "null"),
#panel.spacing=unit(c(0,0,0,0), "null")
)
#----------------------------------
vertices <- vertices %>%
mutate( group = com$membership) %>%
mutate(group=as.numeric(factor(group,
levels=sort(summary (as.factor(group)),index.return=TRUE,decreasing = T)$ix,
order=TRUE)))%>%
filter( group<10) %>%
arrange(desc(group),n) %>%
mutate(name=factor(name, name))
# keep only this people in edges
connect <- connect %>%
filter(from %in% vertices$name) %>%
filter(to %in% vertices$name)%>%
left_join(vertices,by=c('from'='name'))
# Create a graph object with igraph
mygraph <- graph_from_data_frame( connect, vertices = vertices, directed = FALSE )
ggraph(mygraph, layout="linear") +
#geom_edge_arc(aes(x=y, y=x, xend=yend, yend=xend, alpha = ..index..,color = node.class))+
geom_edge_arc(aes(edge_colour=as.factor(group)), edge_alpha=0.5, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(size=n, fill=as.factor(group)), shape=21,color='black',alpha=0.9,stroke=0.1) +
scale_size_continuous(range=c(0.5,10)) +
scale_fill_manual(values=mycolor) +
scale_edge_colour_manual(values=mycolor) +
#geom_node_text(aes(label=name), angle=0, hjust=1, nudge_y = -1.5, size=2) +
coord_flip()+
geom_node_text(aes(label=name,color=as.factor(group)), angle=0, hjust=1, nudge_y = -1.5, size=2) +
scale_color_manual(values=mycolor) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2))+
theme_minimal() +
theme(
legend.position="none",
panel.grid = element_blank(),
axis.line = element_blank(),
axis.ticks =element_blank(),
axis.text =element_blank(),
axis.title = element_blank()
#plot.margin=unit(c(0,0,0,0), "null"),
#panel.spacing=unit(c(0,0,0,0), "null")
)
#EasyCharts团队出品，
#如需使用与深入学习，请联系微信：EasyCharts
#Referre: https://jokergoo.github.io/circlize_book/book/graphics.html#links
library(circlize)
library(RColorBrewer)
library(ComplexHeatmap)
col <- colorRamp2(seq(-2,2,length.out=7),rev(brewer.pal(n = 7, name = "RdYlBu")))
set.seed(1234)
data <- matrix(rnorm(100 * 10), nrow = 10, ncol = 100)
factors <- rep(letters[1:2], times = c(30, 70))
data_list <- list(a = data[, factors == "a"], b = data[, factors == "b"])
dend_list <- list(a = as.dendrogram(hclust(dist(t(data_list[["a"]])))),
b = as.dendrogram(hclust(dist(t(data_list[["b"]])))))
circlize_plot = function() {
circos.par(cell.padding = c(0, 0, 0, 0), gap.degree = 5)
circos.initialize(factors = factors, xlim = cbind(c(0, 0), table(factors)))
circos.track(ylim = c(0, 10), bg.border = NA,
panel.fun = function(x, y) {
sector.index = get.cell.meta.data("sector.index")
d = data_list[[sector.index]]
dend = dend_list[[sector.index]]
d2 = d[, order.dendrogram(dend)]
col_data = col(d2)
nr = nrow(d2)
nc = ncol(d2)
for (i in 1:nr) {
circos.rect(1:nc - 1, rep(nr - i, nc), 1:nc, rep(nr - i + 1, nc),
border = 'black', col = col_data[i, ],size=0.1) }
circos.text(CELL_META$xcenter,  CELL_META$cell.ylim[1] + uy(25, "mm"),
CELL_META$sector.index)
circos.axis(labels.cex = 1, major.at = seq(0.5, round(CELL_META$xlim[2])+0.5,2),
labels=seq(0, round(CELL_META$xlim[2]),2))
circos.yaxis(labels.cex = 0.5,at = seq(0.5, round(CELL_META$ylim[2])+0.5,1),
labels=letters[1:10])
})
max_height <- max(sapply(dend_list, function(x) attr(x, "height")))
circos.track(ylim = c(0, max_height),
bg.border = NA, track.height = 0.5,
panel.fun = function(x, y) {
sector.index = get.cell.meta.data("sector.index")
dend = dend_list[[sector.index]]
circos.dendrogram(dend, max_height = max_height)})
circos.clear()
}
lgd_links = Legend(at = c(-2, -1, 0, 1, 2), col_fun = col,
title_position = "topleft", title = "value")
circlize_plot()
w <- grobWidth(lgd_links)
h <- grobHeight(lgd_links)
vp <- viewport(x = unit(1, "npc") - unit(2, "mm"),
y = unit(4, "mm"),
width = w,
height = h,
just = c("right", "bottom"))
pushViewport(vp)
grid.draw(lgd_links)
#EasyCharts团队出品，
#如需使用与深入学习，请联系微信：EasyCharts
library(tidyverse)
library(circlize)
library(viridis)
library(igraph)
library(ggraph)
library(colormap)
library(ggplot2)
library(reshape2)
library(wesanderson)
dataUU <-read.csv("AdjacencyUndirectedUnweighted.csv",header=TRUE,check.names = FALSE)
# Transform the adjacency matrix in a long format
connect <- dataUU %>%
gather(key="to", value="value", -1) %>%
mutate(to = gsub("\\.", " ",to)) %>%
na.omit()
# Number of connection per person
c( as.character(connect$from), as.character(connect$to)) %>%
as.tibble() %>%
group_by(value) %>%
summarize(n=n()) -> vertices
colnames(vertices) <- c("name", "n")
# Create a graph object with igraph
mygraph <- graph_from_data_frame( connect, vertices = vertices, directed = FALSE )
# Find community
com <- walktrap.community(mygraph)
#Reorder dataset and make the graph
# Create a graph object with igraph
mygraph <- graph_from_data_frame( connect, vertices = vertices, directed = FALSE )
mycolor <- wes_palette("Darjeeling1", max(vertices$group), type = "continuous")
#----------------------------------
vertices <- vertices %>%
mutate( group = com$membership) %>%
mutate(group=as.numeric(factor(group,
levels=sort(summary (as.factor(group)),index.return=TRUE,decreasing = T)$ix,
order=TRUE)))%>%
filter( group<10) %>%
arrange(desc(group),n) %>%
mutate(name=factor(name, name))
# keep only this people in edges
connect <- connect %>%
filter(from %in% vertices$name) %>%
filter(to %in% vertices$name)%>%
left_join(vertices,by=c('from'='name'))
# Create a graph object with igraph
mygraph <- graph_from_data_frame( connect, vertices = vertices, directed = FALSE )
ggraph(mygraph, layout="linear") +
#geom_edge_arc(aes(x=y, y=x, xend=yend, yend=xend, alpha = ..index..,color = node.class))+
geom_edge_arc(aes(edge_colour=as.factor(group)), edge_alpha=0.5, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(size=n, fill=as.factor(group)), shape=21,color='black',alpha=0.9,stroke=0.1) +
scale_size_continuous(range=c(0.5,10)) +
scale_fill_manual(values=mycolor) +
scale_edge_colour_manual(values=mycolor) +
#geom_node_text(aes(label=name), angle=0, hjust=1, nudge_y = -1.5, size=2) +
coord_flip()+
geom_node_text(aes(label=name,color=as.factor(group)), angle=0, hjust=1, nudge_y = -1.5, size=2) +
scale_color_manual(values=mycolor) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2))+
theme_minimal() +
theme(
legend.position="none",
panel.grid = element_blank(),
axis.line = element_blank(),
axis.ticks =element_blank(),
axis.text =element_blank(),
axis.title = element_blank()
#plot.margin=unit(c(0,0,0,0), "null"),
#panel.spacing=unit(c(0,0,0,0), "null")
)
#EasyCharts团队出品，
#如需使用与深入学习，请联系微信：EasyCharts
library(tidyverse)
library(circlize)
library(viridis)
library(igraph)
library(ggraph)
library(colormap)
library(ggplot2)
library(reshape2)
library(wesanderson)
dataUU <-read.csv("AdjacencyUndirectedUnweighted.csv",header=TRUE,check.names = FALSE)
# Transform the adjacency matrix in a long format
connect <- dataUU %>%
gather(key="to", value="value", -1) %>%
mutate(to = gsub("\\.", " ",to)) %>%
na.omit()
# Number of connection per person
c( as.character(connect$from), as.character(connect$to)) %>%
as.tibble() %>%
group_by(value) %>%
summarize(n=n()) -> vertices
colnames(vertices) <- c("name", "n")
# Create a graph object with igraph
mygraph <- graph_from_data_frame( connect, vertices = vertices, directed = FALSE )
# Find community
com <- walktrap.community(mygraph)
#Reorder dataset and make the graph
vertices <- vertices %>%
mutate( group = com$membership) %>%
filter( group<10) %>%
mutate(group=as.numeric(factor(group,
levels=sort(summary (as.factor(group)),index.return=TRUE,decreasing = T)$ix,
order=TRUE)))%>%
arrange(group,desc(n)) %>%
mutate(name=factor(name, name))
# keep only this people in edges
connect <- connect %>%
filter(from %in% vertices$name) %>%
filter(to %in% vertices$name)%>%
left_join(vertices,by=c('from'='name'))
# Create a graph object with igraph
mygraph <- graph_from_data_frame( connect, vertices = vertices, directed = FALSE )
mycolor <- wes_palette("Darjeeling1", max(vertices$group), type = "continuous")
# Make the graph
ggraph(mygraph, layout="linear") +
#geom_edge_arc(aes(x=y, y=x, xend=yend, yend=xend, alpha = ..index..,color = node.class))+
geom_edge_arc(aes(edge_colour=as.factor(group)), edge_alpha=0.5, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(size=n, fill=as.factor(group)), shape=21,color='black',alpha=0.9,stroke=0.1) +
scale_size_continuous(range=c(0.5,10)) +
scale_fill_manual(values=mycolor) +
scale_edge_colour_manual(values=mycolor) +
#geom_node_text(aes(label=name), angle=0, hjust=1, nudge_y = -1.5, size=2) +
#coord_flip()+
geom_node_text(aes(label=name,color=as.factor(group)), angle=90, hjust=1, nudge_y = -1.5, size=2) +
scale_color_manual(values=mycolor) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2))+
theme_minimal() +
theme(
legend.position="none",
panel.grid = element_blank(),
axis.line = element_blank(),
axis.ticks =element_blank(),
axis.text =element_blank(),
axis.title = element_blank()
#plot.margin=unit(c(0,0,0,0), "null"),
#panel.spacing=unit(c(0,0,0,0), "null")
)
#EasyCharts团队出品，
#如需使用与深入学习，请联系微信：EasyCharts
#http://www.hiveplot.net/
#https://www.data-imaginist.com/tags/ggraph/
#http://www.sthda.com/english/articles/33-social-network-analysis/135-network-visualization-essentials-in-r/
library(ggraph)
library(igraph)
library(dplyr)
library(wesanderson)
graph <- graph_from_data_frame(highschool)
V(graph)$friends <- degree(graph, mode = 'in')
V(graph)$friends <- ifelse(V(graph)$friends < 5, 'Few',
ifelse(V(graph)$friends >= 15, 'Many', 'Medium'))
V(graph)$count <- degree(graph, mode = 'in')
mycolor <- wes_palette("Darjeeling1", length(unique((V(graph)$friends))), type = "continuous")
ggraph(graph, 'hive', axis = 'friends',sort.by ='count') +
geom_edge_hive(colour = 'black', edge_alpha = 0.3) +
geom_axis_hive(color='black', size = 1, label = TRUE) +
geom_node_point(aes(size=count,fill=friends),
shape=21,colour = 'black',stroke=0.2, alpha = 0.95)+
scale_size_continuous(range=c(0.5,8)) +
scale_fill_manual(values=mycolor)+
guides(fill='none')+
coord_fixed()+
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.line = element_blank(),
axis.ticks =element_blank(),
axis.text =element_blank(),
axis.title = element_blank()
)
#-----------------------------------------------------
flareGr <- graph_from_data_frame(flare$imports)
# Add some metadata to divide nodes by
V(flareGr)$type <- 'Both'
V(flareGr)$type[degree(flareGr, mode = 'in') == 0] <- 'Source'
V(flareGr)$type[degree(flareGr, mode = 'out') == 0] <- 'Sink'
analyticsNodes <- grep('flare.analytics', V(flareGr)$name)
E(flareGr)$type <- 'Other'
E(flareGr)[inc(analyticsNodes)]$type <- 'Analytics'
ggraph(flareGr, 'hive', axis = 'type') +
#geom_edge_hive(colour = 'black', edge_alpha = 0.4) +
#geom_axis_hive(colour = 'black',size=1) +
geom_edge_hive(aes(colour = type), edge_alpha = 0.1) +
geom_axis_hive(aes(colour = type)) +
coord_fixed()+
theme_minimal() +
theme(
legend.position="none",
panel.grid = element_blank(),
axis.line = element_blank(),
axis.ticks =element_blank(),
axis.text =element_blank(),
axis.title = element_blank()
#plot.margin=unit(c(0,0,0,0), "null"),
#panel.spacing=unit(c(0,0,0,0), "null")
)
#EasyCharts团队出品，
#如需使用与深入学习，请联系微信：EasyCharts
library(ggraph)
library(igraph)
library(tidyverse)
library(RColorBrewer)
d1=data.frame(from="origin", to=paste("group", seq(1,10), sep=""))
d2=data.frame(from=sort(sample(rep(d1$to, each=100),100,replace=FALSE)),
to=sample(paste("subgroup", seq(1,100), sep="_"),100,replace=FALSE))
d2<-d2 %>%
mutate(order2=as.numeric(factor(from,
levels=unique(from)[sort(summary (as.factor(from)),index.return=TRUE,decreasing = T)$ix],
order=TRUE)))%>%
arrange(order2)
edges=rbind(d1[,1:2], d2[,1:2])
vertices_name<-unique(c(as.character(edges$from), as.character(edges$to)))
vertices_value <- runif(length(vertices_name))
names(vertices_value)<-vertices_name
d2<-d2%>%
left_join(data.frame(name = vertices_name, value =vertices_value) ,by = c("to" = "name")) %>%
arrange(order2,desc(value))
edges=rbind(d1[,1:2], d2[,1:2])
list_unique<-unique(c(as.character(edges$from), as.character(edges$to)))
vertices = data.frame(
name = list_unique,
value = vertices_value[list_unique]
)
vertices$group = edges$from[ match( vertices$name, edges$to ) ]
vertices$id<-NA
myleaves<-which(is.na( match(vertices$name, edges$from) ))
nleaves<-length(myleaves)
vertices$id[ myleaves ]<- seq(1:nleaves)
vertices$angle<-90 - 360 * vertices$id / nleaves
vertices$hjust<-ifelse( vertices$angle < -90, 1, 0)
vertices$angle<-ifelse(vertices$angle < -90, vertices$angle+180, vertices$angle)
# create a dataframe with connection between leaves (individuals)
all_leaves=paste("subgroup", seq(1,100), sep="_")
connect=rbind( data.frame( from=sample(all_leaves, 100, replace=T) , to=sample(all_leaves, 100, replace=T)),
data.frame( from=sample(head(all_leaves), 30, replace=T) , to=sample( tail(all_leaves), 30, replace=T)),
data.frame( from=sample(all_leaves[25:30], 30, replace=T) , to=sample( all_leaves[55:60], 30, replace=T)),
data.frame( from=sample(all_leaves[75:80], 30, replace=T) , to=sample( all_leaves[55:60], 30, replace=T)) )
connect$value=runif(nrow(connect))
mygraph <- graph_from_data_frame( edges, vertices=vertices )
from = match( connect$from, vertices$name)
to = match( connect$to, vertices$name)
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_node_point(aes(filter = leaf, x = x*1.07, y=y*1.07, fill=group, size=value),
alpha=1,shape=21, stroke=0.2) +#
geom_conn_bundle(data = get_con(from = from, to = to), aes(edge_colour=group),
tension=1,alpha=1,  edge_width=0.5) +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=3, alpha=1) +
scale_size_continuous( range = c(0.1,5) ) +
scale_colour_manual(values= rep( brewer.pal(9,"Paired") , 30)) +
scale_edge_colour_manual(values= rep( brewer.pal(9,"Paired") , 30)) +
scale_fill_manual(values= rep( brewer.pal(9,"Paired") , 30)) +
expand_limits(x = c(-1.4, 1.4), y = c(-1.3, 1.3))+
coord_fixed()+
theme_minimal() +
theme(
legend.position="none",
panel.grid = element_blank(),
axis.line = element_blank(),
axis.ticks =element_blank(),
axis.text =element_blank(),
axis.title = element_blank(),
plot.margin=unit(c(0,0,0,0), "null"),
panel.spacing=unit(c(0,0,0,0), "null")
)
# Basic usual argument
#png("my figure.png", height = 480, width=480)
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_node_point(aes(filter = leaf, x = x*1.07, y=y*1.07, color=group, size=value),
alpha=0.8) +#shape=21, stroke=0.2,
geom_conn_bundle(data = get_con(from = from, to = to), aes(edge_colour=group),
tension=1,alpha=0.3,  edge_width=0.9) +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=3, alpha=1) +
scale_size_continuous( range = c(0.1,10) ) +
scale_colour_manual(values= rep( brewer.pal(9,"Paired") , 30)) +
scale_edge_colour_manual(values= rep( brewer.pal(9,"Paired") , 30)) +
scale_fill_manual(values= rep( brewer.pal(9,"Paired") , 30)) +
expand_limits(x = c(-1.4, 1.4), y = c(-1.3, 1.3))+
coord_fixed()+
theme_minimal() +
theme(
legend.position="none",
panel.grid = element_blank(),
axis.line = element_blank(),
axis.ticks =element_blank(),
axis.text =element_blank(),
axis.title = element_blank(),
plot.margin=unit(c(0,0,0,0), "null"),
panel.spacing=unit(c(0,0,0,0), "null")
)
#-------------------------------------------------------------
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, width=0.9, aes(colour=..index..)) +
scale_edge_colour_distiller(palette = "RdPu") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=3, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.07, y=y*1.07, colour=group, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(9,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) ) +
expand_limits(x = c(-1.4, 1.4), y = c(-1.4, 1.4))+
theme_minimal() +
theme(
legend.position="none",
panel.grid = element_blank(),
axis.line = element_blank(),
axis.ticks =element_blank(),
axis.text =element_blank(),
axis.title = element_blank(),
plot.margin=unit(c(0,0,0,0), "null"),
panel.spacing=unit(c(0,0,0,0), "null")
)
