theme(#panel.border = element_rect(fill=NA,size = 2),
panel.background  = element_blank(),
plot.title = element_text(size = rel(1.2)),
#axis.text = element_blank(),
#axis.title = element_blank(),
#axis.ticks = element_blank(),
# legend.title = element_blank(),
legend.position = "right")
#EasyCharts团队出品，如有商用必究，
#如需使用与深入学习，请联系微信：EasyCharts
#------------------------------------------------图7-4-1 块状华夫饼图(a)-------------------------------------------------------
library(ggplot2)
library(RColorBrewer)
library(dplyr)
library(reshape2)
nrows <- 10
categ_table <- round(table(mpg$class ) * ((nrows*nrows)/(length(mpg$class))))
sort_table<-sort(categ_table,index.return=TRUE,decreasing = FALSE)
Order<-sort(as.data.frame(categ_table)$Freq,index.return=TRUE,decreasing = FALSE)
df <- expand.grid(y = 1:nrows, x = 1:nrows)
df$category<-factor(rep(names(sort_table),sort_table), levels=names(sort_table))
Color<-brewer.pal(length(sort_table), "Set2")
ggplot(df, aes(x = y, y = x, fill = category)) +
geom_tile(color = "white", size = 0.25) +
#geom_point(color = "black",shape=21,size=6) + # The color of the lines between tiles
coord_fixed(ratio = 1)+
scale_x_continuous(trans = 'reverse') +#expand = c(0, 0),
scale_y_continuous(trans = 'reverse') +#expand = c(0, 0),
#scale_fill_brewer(palette = "Set2") +
scale_fill_manual(name = "Category",
#labels = names(sort_table),
values = Color)+
theme(#panel.border = element_rect(fill=NA,size = 2),
panel.background  = element_blank(),
plot.title = element_text(size = rel(1.2)),
#axis.text = element_blank(),
#axis.title = element_blank(),
#axis.ticks = element_blank(),
# legend.title = element_blank(),
legend.position = "right")
#EasyCharts团队出品，如有商用必究，
#如需使用与深入学习，请联系微信：EasyCharts
#------------------------------------------------图7-4-1 块状华夫饼图(a)-------------------------------------------------------
library(ggplot2)
library(RColorBrewer)
library(dplyr)
library(reshape2)
nrows <- 10
categ_table <- round(table(mpg$class ) * ((nrows*nrows)/(length(mpg$class))))
sort_table<-sort(categ_table,index.return=TRUE,decreasing = TRUE)
Order<-sort(as.data.frame(categ_table)$Freq,index.return=TRUE,decreasing = FALSE)
df <- expand.grid(y = 1:nrows, x = 1:nrows)
df$category<-factor(rep(names(sort_table),sort_table), levels=names(sort_table))
Color<-brewer.pal(length(sort_table), "Set2")
ggplot(df, aes(x = y, y = x, fill = category)) +
geom_tile(color = "white", size = 0.25) +
#geom_point(color = "black",shape=21,size=6) + # The color of the lines between tiles
coord_fixed(ratio = 1)+
scale_x_continuous(trans = 'reverse') +#expand = c(0, 0),
scale_y_continuous(trans = 'reverse') +#expand = c(0, 0),
#scale_fill_brewer(palette = "Set2") +
scale_fill_manual(name = "Category",
#labels = names(sort_table),
values = Color)+
theme(#panel.border = element_rect(fill=NA,size = 2),
panel.background  = element_blank(),
plot.title = element_text(size = rel(1.2)),
#axis.text = element_blank(),
#axis.title = element_blank(),
#axis.ticks = element_blank(),
# legend.title = element_blank(),
legend.position = "right")
mpg$class
categ_table
table(mpg$class)
??table
mpg$class
nrows <- 10
ndeep <- 10
unit<-100
df <- expand.grid(y = 1:nrows, x = 1:nrows)
categ_table <- as.data.frame(table(mpg$class) * (nrows*nrows))
colnames(categ_table)<-c("names","vals")
categ_table<-arrange(categ_table,desc(vals))
categ_table$vals<-categ_table$vals /unit
tb4waffles <- expand.grid(y = 1:ndeep,x = seq_len(ceiling(sum(categ_table$vals) / ndeep)))
regionvec <- as.character(rep(categ_table$names, categ_table$vals))
tb4waffles<-tb4waffles[1:length(regionvec),]
tb4waffles$names <- factor(regionvec,levels=categ_table$names)
Color<-brewer.pal(nrow(categ_table), "Set2")
ggplot(tb4waffles, aes(x = x, y = y, fill = names)) +
#geom_tile(color = "white") + # The color of the lines between tiles
geom_point(color = "black",shape=21,size=5) + # The color of the lines between tiles
scale_fill_manual(name = "Category",
#labels = names(sort_table),
values = Color)+
xlab("1 square = 100")+
ylab("")+
coord_fixed(ratio = 1)+
theme(#panel.border = element_rect(fill=NA,size = 2),
panel.background  = element_blank(),
plot.title = element_text(size = rel(1.2)),
#axis.text = element_blank(),
#axis.title = element_blank(),
#axis.ticks = element_blank(),
# legend.title = element_blank(),
legend.position = "right")
library(ggplot2)
library(RColorBrewer)
library(reshape2)
nrows <- 10
categ_table <- round(table(mpg$class ) * ((nrows*nrows)/(length(mpg$class))))
sort_table<-sort(categ_table,index.return=TRUE,decreasing = FALSE)
Order<-sort(as.data.frame(categ_table)$Freq,index.return=TRUE,decreasing = FALSE)
df <- expand.grid(y = 1:nrows, x = 1:nrows)
df$category<-factor(rep(names(sort_table),sort_table), levels=names(sort_table))
Colormap<-brewer.pal(length(sort_table), "Set2")
ggplot(df, aes(x = y, y = x, fill = category)) +
geom_tile(color = "white", size = 0.25) +  #图7-5-1(a)块状堆积型华夫饼图
#geom_point(color = "black",shape=21,size=6) + #图7-5-2(a) 点状堆积型华夫饼图
coord_fixed(ratio = 1)+
scale_x_continuous(trans = 'reverse') +
scale_y_continuous(trans = 'reverse') +
scale_fill_manual(name = "Category", values = Colormap)+
theme(panel.background  = element_blank(),
plot.title = element_text(size = rel(1.2)),
legend.position = "right")
library(ggplot2)
library(RColorBrewer)
library(dplyr)
dt <- data.frame(Value = c(24.20,30.90,12.50,12.30,8.10,12.10),
Chips = c('LVS','SJM','MCE','Galaxy','MGM','Wynn'))
dt <-arrange(dt,Value)
dt$Chips <- factor(dt$Chips, levels =dt$Chips)
ggplot(dt, aes(x = "", y = Value, fill = Chips)) +
geom_bar(stat = "identity", position="stack",width = 1,color="black",size=0.25) +
coord_polar(theta = "y",start=0) +
labs(x = "", y = "", title = "") +
scale_fill_manual( values=brewer.pal(nrow(dt), "Blues")) +
theme_void()
library(RColorBrewer)
library(dplyr)
library(graphics)
#-------------------------图7-1-1 饼图(a)------------------------------------------
df <- data.frame(value = c(24.20,30.90,12.50,12.30,8.10,12.10),
group = c('LVS','SJM','MCE','Galaxy','MGM','Wynn'))
df <-arrange(df,value)
labs <- paste0(df$group," \n(", round(df$value/sum(df$value)*100,2), "%)")
pie(df$value,labels=labs, init.angle=90,col =  brewer.pal(nrow(df), "Reds"),
border="black")
df <- data.frame(value = c(24.20,75.90,12.50,12.30,8.10,12.10),
group = c('LVS','SJM','MCE','Galaxy','MGM','Wynn'))
df <-arrange(df,desc(value))
df$color<-rev(brewer.pal(nrow(df), "Oranges"))
df<-df[c(2:nrow(df),1),]
labs <- paste0(df$group," \n(", round(df$value/sum(df$value)*100,2), "%)")
pie(df$value,labels=labs, init.angle=90,col = df$color,
border="black")
df <- data.frame(value = c(24.20,75.90,12.50,12.30,8.10,12.10),
group = c('LVS','SJM','MCE','Galaxy','MGM','Wynn'))
df <-arrange(df,value)
labs <- paste0(df$group," \n(", round(df$value/sum(df$value)*100,2), "%)")
pie(df$value,labels=labs, init.angle=90,col =  brewer.pal(nrow(df), "Reds"),
border="black")
df <- data.frame(value = c(24.20,75.90,12.50,12.30,8.10,12.10),
group = c('LVS','SJM','MCE','Galaxy','MGM','Wynn'))
df <-arrange(df,desc(value))
df$color<-rev(brewer.pal(nrow(df), "Oranges"))
df<-df[c(2:nrow(df),1),]
labs <- paste0(df$group," \n(", round(df$value/sum(df$value)*100,2), "%)")
pie(df$value,labels=labs, init.angle=90,col = df$color,
border="black")
n<-6
gg_color_hue <- function(n) {hues = seq(15, 375, length = n + 1); hcl(h = hues, l = 65, c = 100)[1:n]}
pie(df$value,labels=labs, init.angle=90,col =gg_color_hue,
border="black")
gg_color_hue
gg_color_hue <- function(n) {hues = seq(15, 375, length = n + 1); hcl(h = hues, l = 65, c = 100)[1:n]}
pie(df$value,labels=labs, init.angle=90,col =gg_color_hue(n),
border="black")
pie(df$value,labels=labs, init.angle=90,col =rev(brewer.pal(nrow(df), "blues")),
border="black")
pie(df$value,labels=labs, init.angle=90,col =rev(brewer.pal(nrow(df), "Blues")),
border="black")
df <- data.frame(value = c(24.20,75.90,12.50,12.30,8.10,12.10),
group = c('LVS','SJM','MCE','Galaxy','MGM','Wynn'))
df <-arrange(df,desc(value))
df$color<-rev(brewer.pal(nrow(df), "Oranges"))
df<-df[c(2:nrow(df),1),]
labs <- paste0(df$group," \n(", round(df$value/sum(df$value)*100,2), "%)")
pie(df$value,labels=labs, init.angle=90,col = df$color,
border="black")
df$color<-rev(brewer.pal(nrow(df), "Blues"))
pie(df$value,labels=labs, init.angle=90,col = df$color,
border="black")
colors
colors<-rev(brewer.pal(nrow(df), "Blues"))
colors
df <- data.frame(value = c(24.20,75.90,12.50,12.30,8.10,12.10),
group = c('LVS','SJM','MCE','Galaxy','MGM','Wynn'))
df <-arrange(df,desc(value))
df$color<-rev(brewer.pal(nrow(df), "Blues"))#Oranges
df<-df[c(2:nrow(df),1),]
labs <- paste0(df$group," \n(", round(df$value/sum(df$value)*100,2), "%)")
pie(df$value,labels=labs, init.angle=90,col = df$color,
border="black")
pie(df$value,labels=labs, init.angle=90,col ="#3182BD",
border="black")
#EasyCharts团队出品，如有商用必究，
#如需使用与深入学习，请联系微信：EasyCharts
library(ggplot2)
library(scatterpie)
library(RColorBrewer)
crime <- read.csv("crimeRatesByState2005.tsv",header = TRUE, sep = "\t", stringsAsFactors = F)
radius <- sqrt(crime$population / pi)
Max_radius<-max(radius)
Bubble_Scale<-0.1
crime$radius <- Bubble_Scale * radius/Max_radius
mydata<-crime[,c(2,4,3,5:8)]  #数据集构造
Col_Mean<-apply(mydata,2,mean)
Col_Sort<-sort(Col_Mean,index.return=TRUE,decreasing = TRUE)
mydata<-mydata[,Col_Sort$ix]
x<-(mydata$murder-min(mydata$murder))/(max(mydata$murder)-min(mydata$murder))+0.00001
y<-(mydata$Robbery-min(mydata$Robbery))/(max(mydata$Robbery)-min(mydata$Robbery))+0.00001
xlabel<-seq(0,10,2)
xbreak<-(xlabel-min(mydata$murder))/(max(mydata$murder)-min(mydata$murder))+0.00001
ylabel<-seq(0,260,50)
ybreak<-(ylabel-min(mydata$Robbery))/(max(mydata$Robbery)-min(mydata$Robbery))+0.00001
mydata2<-data.frame(x,y,radius=crime$radius)
mydata2<-cbind(mydata2,mydata)
Legnd_label<-colnames(mydata2)[4:10]
colnames(mydata2)[4:10]<-LETTERS[1:7]
#---------------------------------------图7-1-3 散点复合饼图系列(a)-------------------------------------------------
ggplot() +
geom_scatterpie(aes(x=x, y=y,r=0.05), data=mydata2, cols=colnames(mydata2)[4:10],alpha=0.9,size=0.1) +
scale_fill_manual(values=colorRampPalette(brewer.pal(7, "Set2"))(7),labels=Legnd_label)+
#geom_scatterpie_legend(mydata2$radius, x=0.1, y=0.95, n=5,labeller=function(x) round((x* Max_radius/ Bubble_Scale)^2*pi))+
#geom_scatterpie_legend(mydata2$radius, x=0.009758116, y=0.090868067, n=4,labeller=function(x) round((x* Max_radius/ Bubble_Scale)^2*pi))+
scale_x_continuous(breaks=xbreak, labels=xlabel)+
scale_y_continuous(breaks=ybreak, labels=ylabel)+
xlab("murder")+
ylab("Robbery")+
coord_fixed()+
theme(
axis.title=element_text(size=15,face="plain",color="black"),
axis.text = element_text(size=13,face="plain",color="black"),
legend.title=element_text(size=15,face="plain",color="black"),
legend.text = element_text(size=14,face="plain",color="black")
)
#---------------------------------------图7-1-3 散点复合饼图系列(b)-------------------------------------------------
ggplot() +
geom_scatterpie(aes(x=x, y=y,r=radius), data=mydata2, cols=colnames(mydata2)[4:10],alpha=0.9,size=0.25) +
scale_fill_manual(values=colorRampPalette(brewer.pal(7, "Set2"))(7),labels=Legnd_label)+
geom_scatterpie_legend(mydata2$radius, x=0.1, y=0.95, n=5,
labeller=function(x) round((x* Max_radius/ Bubble_Scale)^2*pi))+
#geom_scatterpie_legend(mydata2$radius, x=0.009758116, y=0.090868067, n=4,labeller=function(x) round((x* Max_radius/ Bubble_Scale)^2*pi))+
scale_x_continuous(breaks=xbreak, labels=xlabel)+
scale_y_continuous(breaks=ybreak, labels=ylabel)+
xlab("murder")+
ylab("Robbery")+
coord_fixed()+
theme(
axis.title=element_text(size=15,face="plain",color="black"),
axis.text = element_text(size=13,face="plain",color="black"),
legend.title=element_text(size=15,face="plain",color="black"),
legend.text = element_text(size=14,face="plain",color="black")
)
#label<-seq(350000,35000000,10000000)
#x<-sqrt(label/pi)/Max_radius*Bubble_Scale
#EasyCharts团队出品，如有商用必究，
#如需使用与深入学习，请联系微信：EasyCharts
library(ggraph)
library(igraph)
library(RColorBrewer)
colormap <- colorRampPalette(rev(brewer.pal(5,'Reds')))(5)
graph <- graph_from_data_frame(flare$edges, vertices = flare$vertices)
#---------------------------------------图7-2-2 冰柱图-------------------------------------------------
ggraph(graph, layout ='partition') +
geom_node_tile(aes(fill = as.factor(depth)), size = 0.25)+
geom_node_text( aes(label=shortName,filter =(depth==0)),size=6, angle=0,colour="white") +
geom_node_text( aes(label=shortName,filter =(depth==1 )),size=3.5, angle=90,colour="white") +
geom_node_text( aes(label=shortName,filter =(depth<=3 & depth>1 &  size <10)),size=1.5, angle=90) +
scale_fill_manual(values= colormap)+
#scale_fill_viridis()+
scale_y_reverse()+
theme_void()+
theme(legend.position = "none")
#--------------------------------------图7-2-3 旭日图----------------------------------------------------
ggraph(graph, layout ='partition', circular = TRUE) +
geom_node_arc_bar(aes(fill = as.factor(depth)), size = 0.25)+
geom_node_text( aes(label=shortName,filter =(depth==0)),size=6, angle=0,colour="white") +
geom_node_text( aes(label=shortName,filter =(depth==1 )),size=3.5, angle=0,colour="white") +
geom_node_text( aes(label=shortName,filter =(depth<=3 & depth>1 &  size <10)),size=2, angle=0) +
coord_fixed()+
scale_fill_manual(values= colormap)+
#scale_fill_viridis(discrete = TRUE)+
theme_void()+
theme(legend.position = "none")
#EasyCharts团队出品，如有商用必究，
#如需使用与深入学习，请联系微信：EasyCharts
#------------------------------------------------图7-3-2 树状图(a)----------------------------------------------------------------------
library(treemap)
proglangs <- read.csv("Treemap_Data.csv")
treemap(proglangs,
index=c("parent", "id"),
vSize="value",
vColor="parent",
fontcolor.labels="white",
title="",
palette="Set1")
#-------------------------------------------------图7-3-2 树状图(b)--------------------------------------------------------------------------------
library(ggplot2)
library(treemapify) #devtools::install_github("wilkox/treemapify")
proglangs <- read.csv("Treemap_Data.csv")
treeMapCoordinates <- treemapify(proglangs,
area = "value",
subgroup = "parent")
Class_Label1<-aggregate(cbind(xmin,ymin)~parent,treeMapCoordinates,min)
Class_Label2<-aggregate(cbind(xmax,ymax)~parent,treeMapCoordinates,max)
Class_Label<-cbind(Class_Label1,Class_Label2)
treeMapCoordinates$Area<-(treeMapCoordinates$xmax-treeMapCoordinates$xmin)*(treeMapCoordinates$ymax-treeMapCoordinates$ymin)
treeMapCoordinates$label<-treeMapCoordinates$id
treeMapCoordinates$label[treeMapCoordinates$Area<=0.005]<-""
ggplot(treeMapCoordinates)+
geom_rect(aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax,fill=parent),colour="black")+
geom_text(aes(x=(xmax+xmin)/2,y=ymin+(ymax-ymin)/3,label=label,size=Area))+
scale_size(range=c(2.5,4))+
geom_label(aes(x=(xmin+xmax)/2,y=(ymin+ymax)/2,label=parent),data=Class_Label,size=5,fill="white",alpha=0.5)+
theme_void()+
theme(legend.position = "none")
#-------------------------------------------------图7-3-2 树状图(b)--------------------------------------------------------------------------------
library(ggplot2)
library(treemapify) #devtools::install_github("wilkox/treemapify")
proglangs <- read.csv("Treemap_Data.csv")
treeMapCoordinates <- treemapify(proglangs,
area = "value",
subgroup = "parent")
Class_Label1<-aggregate(cbind(xmin,ymin)~parent,treeMapCoordinates,min)
Class_Label2<-aggregate(cbind(xmax,ymax)~parent,treeMapCoordinates,max)
Class_Label<-cbind(Class_Label1,Class_Label2)
treeMapCoordinates$Area<-(treeMapCoordinates$xmax-treeMapCoordinates$xmin)*(treeMapCoordinates$ymax-treeMapCoordinates$ymin)
treeMapCoordinates$label<-treeMapCoordinates$id
treeMapCoordinates$label[treeMapCoordinates$Area<=0.005]<-""
ggplot(treeMapCoordinates)+
geom_rect(aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax,fill=parent),colour="black")+
geom_text(aes(x=(xmax+xmin)/2,y=ymin+(ymax-ymin)/3,label=label,size=Area))+
scale_size(range=c(2.5,4))+
geom_label(aes(x=(xmin+xmax)/2,y=(ymin+ymax)/2,label=parent),data=Class_Label,size=5,fill="white",alpha=0.5)+
theme_void()+
theme(legend.position = "none")
library(treemap)
library(RColorBrewer)
proglangs <- read.csv("Treemap_Data.csv ")
treemap(proglangs,
index=c("parent", "id"),
vSize="value",
vColor="parent",
fontcolor.labels="black",
title="",
palette="Set1")
library(ggplot2)
library(treemapify) #devtools::install_github("wilkox/treemapify")
proglangs <- read.csv("Treemap_Data.csv")
treeMapCoordinates <- treemapify(proglangs,
area = "value",
subgroup = "parent")
#EasyCharts团队出品，如有商用必究，
#如需使用与深入学习，请联系微信：EasyCharts
library(ggplot2)
library(RColorBrewer)
library(reshape2)  #提供melt()函数
library(plyr)      #提供ddply()函数,join()函数
df <- data.frame(segment = c("A", "B", "C","D"),
Alpha = c(2400	,1200,	600	,250),
Beta = c(1000	,900,	600,	250),
Gamma = c(400,	600	,400,	250),
Delta = c(200,	300	,400,	250))
melt_df<-melt(df,id="segment")
segpct<-rowSums(df[,2:ncol(df)])
for (i in 1:nrow(df)){
for (j in 2:ncol(df)){
df[i,j]<-df[i,j]/segpct[i]*100  #将数字转换成百分比
}
}
segpct<-segpct/sum(segpct)*100
df$xmax <- cumsum(segpct)
df$xmin <- (df$xmax - segpct)
dfm <- melt(df, id = c("segment", "xmin", "xmax"),value.name="percentage")
colnames(dfm)[ncol(dfm)]<-"percentage"
#ddply()函数使用自定义统计函数，对data.frame分组计算
dfm1 <- ddply(dfm, .(segment), transform, ymax = cumsum(percentage))
dfm1 <- ddply(dfm1, .(segment), transform,ymin = ymax - percentage)
dfm1$xtext <- with(dfm1, xmin + (xmax - xmin)/2)
dfm1$ytext <- with(dfm1, ymin + (ymax - ymin)/2)
#join()函数，连接两个表格data.frame
dfm2<-join(melt_df, dfm1, by = c("segment", "variable"), type = "left", match = "all")
ggplot()+
geom_rect(aes(ymin = ymin, ymax = ymax, xmin = xmin, xmax = xmax, fill = variable),dfm2,colour = "black") +
geom_text(aes(x = xtext, y = ytext,  label = value),dfm2 ,size = 4)+
geom_text(aes(x = xtext, y = 103, label = paste("Seg ", segment)),dfm2 ,size = 4)+
geom_text(aes(x = 102, y = seq(12.5,100,25), label = c("Alpha","Beta","Gamma","Delta")), size = 4,hjust = 0)+
scale_x_continuous(breaks=seq(0,100,25),limits=c(0,110))+
theme(panel.background=element_rect(fill="white",colour=NA),
panel.grid.major = element_line(colour = "grey60",size=.25,linetype ="dotted" ),
panel.grid.minor = element_line(colour = "grey60",size=.25,linetype ="dotted" ),
text=element_text(size=15),
legend.position="none"
)
#EasyCharts团队出品，如有商用必究，
#如需使用与深入学习，请联系微信：EasyCharts
#------------------------------------------------图7-4-1 块状华夫饼图(a)-------------------------------------------------------
library(ggplot2)
library(RColorBrewer)
library(reshape2)
nrows <- 10
categ_table <- round(table(mpg$class ) * ((nrows*nrows)/(length(mpg$class))))
sort_table<-sort(categ_table,index.return=TRUE,decreasing = FALSE)
Order<-sort(as.data.frame(categ_table)$Freq,index.return=TRUE,decreasing = FALSE)
df <- expand.grid(y = 1:nrows, x = 1:nrows)
df$category<-factor(rep(names(sort_table),sort_table), levels=names(sort_table))
Color<-brewer.pal(length(sort_table), "Set2")
ggplot(df, aes(x = y, y = x, fill = category)) +
geom_tile(color = "white", size = 0.25) +
#geom_point(color = "black",shape=21,size=6) +
coord_fixed(ratio = 1)+
scale_x_continuous(trans = 'reverse') +#expand = c(0, 0),
scale_y_continuous(trans = 'reverse') +#expand = c(0, 0),
scale_fill_manual(name = "Category",
#labels = names(sort_table),
values = Color)+
theme(#panel.border = element_rect(fill=NA,size = 2),
panel.background  = element_blank(),
plot.title = element_text(size = rel(1.2)),
#axis.text = element_blank(),
#axis.title = element_blank(),
#axis.ticks = element_blank(),
# legend.title = element_blank(),
legend.position = "right")
#------------------------------------------------图7-4-1 块状华夫饼图(b)------------------------------------------
library(dplyr)
nrows <- 10
ndeep <- 10
unit<-100
df <- expand.grid(y = 1:nrows, x = 1:nrows)
categ_table <- as.data.frame(table(mpg$class) * (nrows*nrows))
colnames(categ_table)<-c("names","vals")
categ_table<-arrange(categ_table,desc(vals))
categ_table$vals<-categ_table$vals /unit
tb4waffles <- expand.grid(y = 1:ndeep,x = seq_len(ceiling(sum(categ_table$vals) / ndeep)))
regionvec <- as.character(rep(categ_table$names, categ_table$vals))
tb4waffles<-tb4waffles[1:length(regionvec),]
tb4waffles$names <- factor(regionvec,levels=categ_table$names)
Color<-brewer.pal(nrow(categ_table), "Set2")
ggplot(tb4waffles, aes(x = x, y = y, fill = names)) +
#geom_tile(color = "white") + #
geom_point(color = "black",shape=21,size=5) + #
scale_fill_manual(name = "Category",
values = Color)+
xlab("1 square = 100")+
ylab("")+
coord_fixed(ratio = 1)+
theme(#panel.border = element_rect(fill=NA,size = 2),
panel.background  = element_blank(),
plot.title = element_text(size = rel(1.2)),
#axis.text = element_blank(),
#axis.title = element_blank(),
#axis.ticks = element_blank(),
# legend.title = element_blank(),
legend.position = "right")
library(ggplot2)
library(RColorBrewer)
library(reshape2)  #提供melt()函数
library(plyr)      #提供ddply()函数,join()函数
df <- data.frame(segment = c("A", "B", "C","D"),
Alpha = c(2400	,1200,	600	,250),
Beta = c(1000	,900,	600,	250),
Gamma = c(400,	600	,400,	250),
Delta = c(200,	300	,400,	250))
melt_df<-melt(df,id="segment")
segpct<-rowSums(df[,2:ncol(df)])
for (i in 1:nrow(df)){
for (j in 2:ncol(df)){
df[i,j]<-df[i,j]/segpct[i]*100  #将数字转换成百分比
}
}
segpct<-segpct/sum(segpct)*100
df$xmax <- cumsum(segpct)
df$xmin <- (df$xmax - segpct)
dfm <- melt(df, id = c("segment", "xmin", "xmax"),value.name="percentage")
colnames(dfm)[ncol(dfm)]<-"percentage"
#ddply()函数使用自定义统计函数，对data.frame分组计算
dfm1 <- ddply(dfm, .(segment), transform, ymax = cumsum(percentage))
dfm1 <- ddply(dfm1, .(segment), transform,ymin = ymax - percentage)
dfm1$xtext <- with(dfm1, xmin + (xmax - xmin)/2)
dfm1$ytext <- with(dfm1, ymin + (ymax - ymin)/2)
#join()函数，连接两个表格data.frame
dfm2<-join(melt_df, dfm1, by = c("segment", "variable"), type = "left", match = "all")
ggplot()+
geom_rect(aes(ymin = ymin, ymax = ymax, xmin = xmin, xmax = xmax, fill = variable),dfm2,colour = "black") +
geom_text(aes(x = xtext, y = ytext,  label = value),dfm2 ,size = 4)+
geom_text(aes(x = xtext, y = 103, label = paste("Seg ", segment)),dfm2 ,size = 4)+
geom_text(aes(x = 102, y = seq(12.5,100,25), label = c("Alpha","Beta","Gamma","Delta")), size = 4,hjust = 0)+
scale_x_continuous(breaks=seq(0,100,25),limits=c(0,110))+
theme(panel.background=element_rect(fill="white",colour=NA),
panel.grid.major = element_line(colour = "grey60",size=.25,linetype ="dotted" ),
panel.grid.minor = element_line(colour = "grey60",size=.25,linetype ="dotted" ),
text=element_text(size=15),
legend.position="none")
#-----------------------------------------------Method 2-----------------------------------
library(vcd)
table<-xtabs(value ~variable+segment, melt_df)
mosaic( ~segment+variable,table,shade=TRUE,legend=TRUE,color=TRUE)
